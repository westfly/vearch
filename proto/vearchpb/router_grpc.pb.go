// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: router_grpc.proto

package vearchpb

import (
	bytes "bytes"
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RetrievalParameters_DistanceMetricType int32

const (
	RetrievalParameters_InnerProduct RetrievalParameters_DistanceMetricType = 0
	RetrievalParameters_L2           RetrievalParameters_DistanceMetricType = 1
)

var RetrievalParameters_DistanceMetricType_name = map[int32]string{
	0: "InnerProduct",
	1: "L2",
}

var RetrievalParameters_DistanceMetricType_value = map[string]int32{
	"InnerProduct": 0,
	"L2":           1,
}

func (x RetrievalParameters_DistanceMetricType) String() string {
	return proto.EnumName(RetrievalParameters_DistanceMetricType_name, int32(x))
}

func (RetrievalParameters_DistanceMetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{21, 0}
}

type RequestHead struct {
	TimeOutMs  int64  `protobuf:"varint,1,opt,name=time_out_ms,json=timeOutMs,proto3" json:"time_out_ms,omitempty"`
	UserName   string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Password   string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	DbName     string `protobuf:"bytes,4,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	SpaceName  string `protobuf:"bytes,5,opt,name=space_name,json=spaceName,proto3" json:"space_name,omitempty"`
	ClientType string `protobuf:"bytes,6,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	// from, sort, request_id, partition_id
	Params               map[string]string `protobuf:"bytes,7,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RequestHead) Reset()      { *m = RequestHead{} }
func (*RequestHead) ProtoMessage() {}
func (*RequestHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{0}
}
func (m *RequestHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHead.Merge(m, src)
}
func (m *RequestHead) XXX_Size() int {
	return m.Size()
}
func (m *RequestHead) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHead.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHead proto.InternalMessageInfo

type ResponseHead struct {
	Err                  *Error            `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Params               map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ResponseHead) Reset()      { *m = ResponseHead{} }
func (*ResponseHead) ProtoMessage() {}
func (*ResponseHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{1}
}
func (m *ResponseHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseHead.Merge(m, src)
}
func (m *ResponseHead) XXX_Size() int {
	return m.Size()
}
func (m *ResponseHead) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseHead.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseHead proto.InternalMessageInfo

type GetRequest struct {
	Head                 *RequestHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	PrimaryKeys          []string     `protobuf:"bytes,4,rep,name=primary_keys,json=primaryKeys,proto3" json:"primary_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetRequest) Reset()      { *m = GetRequest{} }
func (*GetRequest) ProtoMessage() {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{2}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetHead() *RequestHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *GetRequest) GetPrimaryKeys() []string {
	if m != nil {
		return m.PrimaryKeys
	}
	return nil
}

type DeleteRequest struct {
	Head                 *RequestHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	PrimaryKeys          []string     `protobuf:"bytes,4,rep,name=primary_keys,json=primaryKeys,proto3" json:"primary_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DeleteRequest) Reset()      { *m = DeleteRequest{} }
func (*DeleteRequest) ProtoMessage() {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{3}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetHead() *RequestHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *DeleteRequest) GetPrimaryKeys() []string {
	if m != nil {
		return m.PrimaryKeys
	}
	return nil
}

type AddRequest struct {
	Head                 *RequestHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Doc                  *Document    `protobuf:"bytes,4,opt,name=doc,proto3" json:"doc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AddRequest) Reset()      { *m = AddRequest{} }
func (*AddRequest) ProtoMessage() {}
func (*AddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{4}
}
func (m *AddRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRequest.Merge(m, src)
}
func (m *AddRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRequest proto.InternalMessageInfo

func (m *AddRequest) GetHead() *RequestHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *AddRequest) GetDoc() *Document {
	if m != nil {
		return m.Doc
	}
	return nil
}

type UpdateRequest struct {
	Head                 *RequestHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Doc                  *Document    `protobuf:"bytes,4,opt,name=doc,proto3" json:"doc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateRequest) Reset()      { *m = UpdateRequest{} }
func (*UpdateRequest) ProtoMessage() {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{5}
}
func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetHead() *RequestHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *UpdateRequest) GetDoc() *Document {
	if m != nil {
		return m.Doc
	}
	return nil
}

type BulkRequest struct {
	Head                 *RequestHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Docs                 []*Document  `protobuf:"bytes,4,rep,name=docs,proto3" json:"docs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BulkRequest) Reset()      { *m = BulkRequest{} }
func (*BulkRequest) ProtoMessage() {}
func (*BulkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{6}
}
func (m *BulkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BulkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BulkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BulkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BulkRequest.Merge(m, src)
}
func (m *BulkRequest) XXX_Size() int {
	return m.Size()
}
func (m *BulkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BulkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BulkRequest proto.InternalMessageInfo

func (m *BulkRequest) GetHead() *RequestHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *BulkRequest) GetDocs() []*Document {
	if m != nil {
		return m.Docs
	}
	return nil
}

type ForceMergeRequest struct {
	Head                 *RequestHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ForceMergeRequest) Reset()      { *m = ForceMergeRequest{} }
func (*ForceMergeRequest) ProtoMessage() {}
func (*ForceMergeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{7}
}
func (m *ForceMergeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForceMergeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForceMergeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForceMergeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceMergeRequest.Merge(m, src)
}
func (m *ForceMergeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ForceMergeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceMergeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ForceMergeRequest proto.InternalMessageInfo

func (m *ForceMergeRequest) GetHead() *RequestHead {
	if m != nil {
		return m.Head
	}
	return nil
}

type FlushRequest struct {
	Head                 *RequestHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FlushRequest) Reset()      { *m = FlushRequest{} }
func (*FlushRequest) ProtoMessage() {}
func (*FlushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{8}
}
func (m *FlushRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlushRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushRequest.Merge(m, src)
}
func (m *FlushRequest) XXX_Size() int {
	return m.Size()
}
func (m *FlushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlushRequest proto.InternalMessageInfo

func (m *FlushRequest) GetHead() *RequestHead {
	if m != nil {
		return m.Head
	}
	return nil
}

type GetResponse struct {
	Head                 *ResponseHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Items                []*Item       `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetResponse) Reset()      { *m = GetResponse{} }
func (*GetResponse) ProtoMessage() {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{9}
}
func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetHead() *ResponseHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *GetResponse) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type AddResponse struct {
	Head                 *ResponseHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	PrimaryKey           string        `protobuf:"bytes,4,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AddResponse) Reset()      { *m = AddResponse{} }
func (*AddResponse) ProtoMessage() {}
func (*AddResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{10}
}
func (m *AddResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddResponse.Merge(m, src)
}
func (m *AddResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddResponse proto.InternalMessageInfo

func (m *AddResponse) GetHead() *ResponseHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *AddResponse) GetPrimaryKey() string {
	if m != nil {
		return m.PrimaryKey
	}
	return ""
}

type UpdateResponse struct {
	Head                 *ResponseHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UpdateResponse) Reset()      { *m = UpdateResponse{} }
func (*UpdateResponse) ProtoMessage() {}
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{11}
}
func (m *UpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResponse.Merge(m, src)
}
func (m *UpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResponse proto.InternalMessageInfo

func (m *UpdateResponse) GetHead() *ResponseHead {
	if m != nil {
		return m.Head
	}
	return nil
}

type DeleteResponse struct {
	Head                 *ResponseHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Items                []*Item       `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DeleteResponse) Reset()      { *m = DeleteResponse{} }
func (*DeleteResponse) ProtoMessage() {}
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{12}
}
func (m *DeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteResponse.Merge(m, src)
}
func (m *DeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteResponse proto.InternalMessageInfo

func (m *DeleteResponse) GetHead() *ResponseHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *DeleteResponse) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type BulkResponse struct {
	Head                 *ResponseHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Items                []*Item       `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BulkResponse) Reset()      { *m = BulkResponse{} }
func (*BulkResponse) ProtoMessage() {}
func (*BulkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{13}
}
func (m *BulkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BulkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BulkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BulkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BulkResponse.Merge(m, src)
}
func (m *BulkResponse) XXX_Size() int {
	return m.Size()
}
func (m *BulkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BulkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BulkResponse proto.InternalMessageInfo

func (m *BulkResponse) GetHead() *ResponseHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *BulkResponse) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type ForceMergeResponse struct {
	Head                 *ResponseHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Shards               *SearchStatus `protobuf:"bytes,2,opt,name=shards,proto3" json:"shards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ForceMergeResponse) Reset()      { *m = ForceMergeResponse{} }
func (*ForceMergeResponse) ProtoMessage() {}
func (*ForceMergeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{14}
}
func (m *ForceMergeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForceMergeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForceMergeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForceMergeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceMergeResponse.Merge(m, src)
}
func (m *ForceMergeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ForceMergeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceMergeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ForceMergeResponse proto.InternalMessageInfo

func (m *ForceMergeResponse) GetHead() *ResponseHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *ForceMergeResponse) GetShards() *SearchStatus {
	if m != nil {
		return m.Shards
	}
	return nil
}

type DelByQueryeResponse struct {
	Head                 *ResponseHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	DelNum               int32         `protobuf:"varint,2,opt,name=DelNum,proto3" json:"DelNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DelByQueryeResponse) Reset()      { *m = DelByQueryeResponse{} }
func (*DelByQueryeResponse) ProtoMessage() {}
func (*DelByQueryeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{15}
}
func (m *DelByQueryeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelByQueryeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelByQueryeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelByQueryeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelByQueryeResponse.Merge(m, src)
}
func (m *DelByQueryeResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelByQueryeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelByQueryeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelByQueryeResponse proto.InternalMessageInfo

func (m *DelByQueryeResponse) GetHead() *ResponseHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *DelByQueryeResponse) GetDelNum() int32 {
	if m != nil {
		return m.DelNum
	}
	return 0
}

type FlushResponse struct {
	Head                 *ResponseHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Shards               *SearchStatus `protobuf:"bytes,2,opt,name=shards,proto3" json:"shards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FlushResponse) Reset()      { *m = FlushResponse{} }
func (*FlushResponse) ProtoMessage() {}
func (*FlushResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{16}
}
func (m *FlushResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlushResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlushResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlushResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushResponse.Merge(m, src)
}
func (m *FlushResponse) XXX_Size() int {
	return m.Size()
}
func (m *FlushResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FlushResponse proto.InternalMessageInfo

func (m *FlushResponse) GetHead() *ResponseHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *FlushResponse) GetShards() *SearchStatus {
	if m != nil {
		return m.Shards
	}
	return nil
}

type TermFilter struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	IsUnion              int32    `protobuf:"varint,3,opt,name=is_union,json=isUnion,proto3" json:"is_union,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TermFilter) Reset()      { *m = TermFilter{} }
func (*TermFilter) ProtoMessage() {}
func (*TermFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{17}
}
func (m *TermFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TermFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TermFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TermFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermFilter.Merge(m, src)
}
func (m *TermFilter) XXX_Size() int {
	return m.Size()
}
func (m *TermFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TermFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TermFilter proto.InternalMessageInfo

type RangeFilter struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	LowerValue           []byte   `protobuf:"bytes,2,opt,name=lower_value,json=lowerValue,proto3" json:"lower_value,omitempty"`
	UpperValue           []byte   `protobuf:"bytes,3,opt,name=upper_value,json=upperValue,proto3" json:"upper_value,omitempty"`
	IncludeLower         bool     `protobuf:"varint,4,opt,name=include_lower,json=includeLower,proto3" json:"include_lower,omitempty"`
	IncludeUpper         bool     `protobuf:"varint,5,opt,name=include_upper,json=includeUpper,proto3" json:"include_upper,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RangeFilter) Reset()      { *m = RangeFilter{} }
func (*RangeFilter) ProtoMessage() {}
func (*RangeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{18}
}
func (m *RangeFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RangeFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RangeFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeFilter.Merge(m, src)
}
func (m *RangeFilter) XXX_Size() int {
	return m.Size()
}
func (m *RangeFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeFilter.DiscardUnknown(m)
}

var xxx_messageInfo_RangeFilter proto.InternalMessageInfo

type SortField struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Type                 bool     `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SortField) Reset()      { *m = SortField{} }
func (*SortField) ProtoMessage() {}
func (*SortField) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{19}
}
func (m *SortField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SortField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SortField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SortField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SortField.Merge(m, src)
}
func (m *SortField) XXX_Size() int {
	return m.Size()
}
func (m *SortField) XXX_DiscardUnknown() {
	xxx_messageInfo_SortField.DiscardUnknown(m)
}

var xxx_messageInfo_SortField proto.InternalMessageInfo

type VectorQuery struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	MinScore             float64  `protobuf:"fixed64,3,opt,name=min_score,json=minScore,proto3" json:"min_score,omitempty"`
	MaxScore             float64  `protobuf:"fixed64,4,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	Boost                float64  `protobuf:"fixed64,5,opt,name=boost,proto3" json:"boost,omitempty"`
	HasBoost             int32    `protobuf:"varint,6,opt,name=has_boost,json=hasBoost,proto3" json:"has_boost,omitempty"`
	Format               string   `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VectorQuery) Reset()      { *m = VectorQuery{} }
func (*VectorQuery) ProtoMessage() {}
func (*VectorQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{20}
}
func (m *VectorQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VectorQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VectorQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VectorQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorQuery.Merge(m, src)
}
func (m *VectorQuery) XXX_Size() int {
	return m.Size()
}
func (m *VectorQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorQuery.DiscardUnknown(m)
}

var xxx_messageInfo_VectorQuery proto.InternalMessageInfo

type RetrievalParameters struct {
	MetricType           RetrievalParameters_DistanceMetricType `protobuf:"varint,1,opt,name=metric_type,json=metricType,proto3,enum=RetrievalParameters_DistanceMetricType" json:"metric_type,omitempty"`
	Nprobe               int32                                  `protobuf:"varint,2,opt,name=nprobe,proto3" json:"nprobe,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *RetrievalParameters) Reset()      { *m = RetrievalParameters{} }
func (*RetrievalParameters) ProtoMessage() {}
func (*RetrievalParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{21}
}
func (m *RetrievalParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrievalParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrievalParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrievalParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrievalParameters.Merge(m, src)
}
func (m *RetrievalParameters) XXX_Size() int {
	return m.Size()
}
func (m *RetrievalParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrievalParameters.DiscardUnknown(m)
}

var xxx_messageInfo_RetrievalParameters proto.InternalMessageInfo

type SearchRequest struct {
	Head                 *RequestHead      `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	ReqNum               int32             `protobuf:"varint,2,opt,name=req_num,json=reqNum,proto3" json:"req_num,omitempty"`
	TopN                 int32             `protobuf:"varint,3,opt,name=topN,proto3" json:"topN,omitempty"`
	IsBruteSearch        int32             `protobuf:"varint,4,opt,name=is_brute_search,json=isBruteSearch,proto3" json:"is_brute_search,omitempty"`
	VecFields            []*VectorQuery    `protobuf:"bytes,5,rep,name=vec_fields,json=vecFields,proto3" json:"vec_fields,omitempty"`
	Fields               []string          `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	RangeFilters         []*RangeFilter    `protobuf:"bytes,7,rep,name=range_filters,json=rangeFilters,proto3" json:"range_filters,omitempty"`
	TermFilters          []*TermFilter     `protobuf:"bytes,8,rep,name=term_filters,json=termFilters,proto3" json:"term_filters,omitempty"`
	OnlineLogLevel       string            `protobuf:"bytes,9,opt,name=online_log_level,json=onlineLogLevel,proto3" json:"online_log_level,omitempty"`
	RetrievalParams      string            `protobuf:"bytes,10,opt,name=retrieval_params,json=retrievalParams,proto3" json:"retrieval_params,omitempty"`
	HasRank              bool              `protobuf:"varint,11,opt,name=has_rank,json=hasRank,proto3" json:"has_rank,omitempty"`
	MultiVectorRank      int32             `protobuf:"varint,12,opt,name=multi_vector_rank,json=multiVectorRank,proto3" json:"multi_vector_rank,omitempty"`
	ParallelBasedOnQuery bool              `protobuf:"varint,13,opt,name=parallel_based_on_query,json=parallelBasedOnQuery,proto3" json:"parallel_based_on_query,omitempty"`
	L2Sqrt               bool              `protobuf:"varint,14,opt,name=l2_sqrt,json=l2Sqrt,proto3" json:"l2_sqrt,omitempty"`
	IvfFlat              bool              `protobuf:"varint,15,opt,name=ivf_flat,json=ivfFlat,proto3" json:"ivf_flat,omitempty"`
	IsVectorValue        bool              `protobuf:"varint,16,opt,name=is_vector_value,json=isVectorValue,proto3" json:"is_vector_value,omitempty"`
	SortFieldMap         map[string]string `protobuf:"bytes,17,rep,name=sort_field_map,json=sortFieldMap,proto3" json:"sort_field_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SortFields           []*SortField      `protobuf:"bytes,18,rep,name=sort_fields,json=sortFields,proto3" json:"sort_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SearchRequest) Reset()      { *m = SearchRequest{} }
func (*SearchRequest) ProtoMessage() {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{22}
}
func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetHead() *RequestHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *SearchRequest) GetReqNum() int32 {
	if m != nil {
		return m.ReqNum
	}
	return 0
}

func (m *SearchRequest) GetTopN() int32 {
	if m != nil {
		return m.TopN
	}
	return 0
}

func (m *SearchRequest) GetIsBruteSearch() int32 {
	if m != nil {
		return m.IsBruteSearch
	}
	return 0
}

func (m *SearchRequest) GetVecFields() []*VectorQuery {
	if m != nil {
		return m.VecFields
	}
	return nil
}

func (m *SearchRequest) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *SearchRequest) GetRangeFilters() []*RangeFilter {
	if m != nil {
		return m.RangeFilters
	}
	return nil
}

func (m *SearchRequest) GetTermFilters() []*TermFilter {
	if m != nil {
		return m.TermFilters
	}
	return nil
}

func (m *SearchRequest) GetOnlineLogLevel() string {
	if m != nil {
		return m.OnlineLogLevel
	}
	return ""
}

func (m *SearchRequest) GetRetrievalParams() string {
	if m != nil {
		return m.RetrievalParams
	}
	return ""
}

func (m *SearchRequest) GetHasRank() bool {
	if m != nil {
		return m.HasRank
	}
	return false
}

func (m *SearchRequest) GetMultiVectorRank() int32 {
	if m != nil {
		return m.MultiVectorRank
	}
	return 0
}

func (m *SearchRequest) GetParallelBasedOnQuery() bool {
	if m != nil {
		return m.ParallelBasedOnQuery
	}
	return false
}

func (m *SearchRequest) GetL2Sqrt() bool {
	if m != nil {
		return m.L2Sqrt
	}
	return false
}

func (m *SearchRequest) GetIvfFlat() bool {
	if m != nil {
		return m.IvfFlat
	}
	return false
}

func (m *SearchRequest) GetIsVectorValue() bool {
	if m != nil {
		return m.IsVectorValue
	}
	return false
}

func (m *SearchRequest) GetSortFieldMap() map[string]string {
	if m != nil {
		return m.SortFieldMap
	}
	return nil
}

func (m *SearchRequest) GetSortFields() []*SortField {
	if m != nil {
		return m.SortFields
	}
	return nil
}

type ResultItem struct {
	Score                float64  `protobuf:"fixed64,1,opt,name=score,proto3" json:"score,omitempty"`
	Fields               []*Field `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	Extra                string   `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
	PKey                 string   `protobuf:"bytes,4,opt,name=p_key,json=pKey,proto3" json:"p_key,omitempty"`
	Source               []byte   `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultItem) Reset()      { *m = ResultItem{} }
func (*ResultItem) ProtoMessage() {}
func (*ResultItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{23}
}
func (m *ResultItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResultItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResultItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResultItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultItem.Merge(m, src)
}
func (m *ResultItem) XXX_Size() int {
	return m.Size()
}
func (m *ResultItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultItem.DiscardUnknown(m)
}

var xxx_messageInfo_ResultItem proto.InternalMessageInfo

type SearchResult struct {
	TotalHits            int32             `protobuf:"varint,1,opt,name=total_hits,json=totalHits,proto3" json:"total_hits,omitempty"`
	MaxScore             float64           `protobuf:"fixed64,2,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	MaxTook              int64             `protobuf:"varint,3,opt,name=max_took,json=maxTook,proto3" json:"max_took,omitempty"`
	MaxTookId            uint32            `protobuf:"varint,4,opt,name=max_took_id,json=maxTookId,proto3" json:"max_took_id,omitempty"`
	Status               *SearchStatus     `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string            `protobuf:"bytes,6,opt,name=msg,proto3" json:"msg,omitempty"`
	ResultItems          []*ResultItem     `protobuf:"bytes,7,rep,name=result_items,json=resultItems,proto3" json:"result_items,omitempty"`
	PID                  uint32            `protobuf:"varint,8,opt,name=pID,proto3" json:"pID,omitempty"`
	Explain              map[uint32]string `protobuf:"bytes,9,rep,name=explain,proto3" json:"explain,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timeout              bool              `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SearchResult) Reset()      { *m = SearchResult{} }
func (*SearchResult) ProtoMessage() {}
func (*SearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{24}
}
func (m *SearchResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResult.Merge(m, src)
}
func (m *SearchResult) XXX_Size() int {
	return m.Size()
}
func (m *SearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResult proto.InternalMessageInfo

type SearchResponse struct {
	Head                 *ResponseHead     `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Results              []*SearchResult   `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	OnlineLogMessage     string            `protobuf:"bytes,3,opt,name=online_log_message,json=onlineLogMessage,proto3" json:"online_log_message,omitempty"`
	Timeout              bool              `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	FlatBytes            []byte            `protobuf:"bytes,5,opt,name=FlatBytes,proto3" json:"FlatBytes,omitempty"`
	SortFieldMap         map[string]string `protobuf:"bytes,6,rep,name=sort_field_map,json=sortFieldMap,proto3" json:"sort_field_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TopSize              int32             `protobuf:"varint,7,opt,name=top_size,json=topSize,proto3" json:"top_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SearchResponse) Reset()      { *m = SearchResponse{} }
func (*SearchResponse) ProtoMessage() {}
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{25}
}
func (m *SearchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse.Merge(m, src)
}
func (m *SearchResponse) XXX_Size() int {
	return m.Size()
}
func (m *SearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse proto.InternalMessageInfo

func (m *SearchResponse) GetHead() *ResponseHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *SearchResponse) GetResults() []*SearchResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *SearchResponse) GetOnlineLogMessage() string {
	if m != nil {
		return m.OnlineLogMessage
	}
	return ""
}

func (m *SearchResponse) GetTimeout() bool {
	if m != nil {
		return m.Timeout
	}
	return false
}

func (m *SearchResponse) GetFlatBytes() []byte {
	if m != nil {
		return m.FlatBytes
	}
	return nil
}

func (m *SearchResponse) GetSortFieldMap() map[string]string {
	if m != nil {
		return m.SortFieldMap
	}
	return nil
}

func (m *SearchResponse) GetTopSize() int32 {
	if m != nil {
		return m.TopSize
	}
	return 0
}

type SearchStatus struct {
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Failed               int32    `protobuf:"varint,2,opt,name=failed,proto3" json:"failed,omitempty"`
	Successful           int32    `protobuf:"varint,3,opt,name=successful,proto3" json:"successful,omitempty"`
	Msg                  string   `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchStatus) Reset()      { *m = SearchStatus{} }
func (*SearchStatus) ProtoMessage() {}
func (*SearchStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{26}
}
func (m *SearchStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchStatus.Merge(m, src)
}
func (m *SearchStatus) XXX_Size() int {
	return m.Size()
}
func (m *SearchStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SearchStatus proto.InternalMessageInfo

type MSearchRequest struct {
	Head                 *RequestHead     `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	SearchRequests       []*SearchRequest `protobuf:"bytes,2,rep,name=search_requests,json=searchRequests,proto3" json:"search_requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MSearchRequest) Reset()      { *m = MSearchRequest{} }
func (*MSearchRequest) ProtoMessage() {}
func (*MSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_535779cc1a17303a, []int{27}
}
func (m *MSearchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSearchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSearchRequest.Merge(m, src)
}
func (m *MSearchRequest) XXX_Size() int {
	return m.Size()
}
func (m *MSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MSearchRequest proto.InternalMessageInfo

func (m *MSearchRequest) GetHead() *RequestHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *MSearchRequest) GetSearchRequests() []*SearchRequest {
	if m != nil {
		return m.SearchRequests
	}
	return nil
}

func init() {
	proto.RegisterEnum("RetrievalParameters_DistanceMetricType", RetrievalParameters_DistanceMetricType_name, RetrievalParameters_DistanceMetricType_value)
	proto.RegisterType((*RequestHead)(nil), "RequestHead")
	proto.RegisterMapType((map[string]string)(nil), "RequestHead.ParamsEntry")
	proto.RegisterType((*ResponseHead)(nil), "ResponseHead")
	proto.RegisterMapType((map[string]string)(nil), "ResponseHead.ParamsEntry")
	proto.RegisterType((*GetRequest)(nil), "GetRequest")
	proto.RegisterType((*DeleteRequest)(nil), "DeleteRequest")
	proto.RegisterType((*AddRequest)(nil), "AddRequest")
	proto.RegisterType((*UpdateRequest)(nil), "UpdateRequest")
	proto.RegisterType((*BulkRequest)(nil), "BulkRequest")
	proto.RegisterType((*ForceMergeRequest)(nil), "ForceMergeRequest")
	proto.RegisterType((*FlushRequest)(nil), "FlushRequest")
	proto.RegisterType((*GetResponse)(nil), "GetResponse")
	proto.RegisterType((*AddResponse)(nil), "AddResponse")
	proto.RegisterType((*UpdateResponse)(nil), "UpdateResponse")
	proto.RegisterType((*DeleteResponse)(nil), "DeleteResponse")
	proto.RegisterType((*BulkResponse)(nil), "BulkResponse")
	proto.RegisterType((*ForceMergeResponse)(nil), "ForceMergeResponse")
	proto.RegisterType((*DelByQueryeResponse)(nil), "DelByQueryeResponse")
	proto.RegisterType((*FlushResponse)(nil), "FlushResponse")
	proto.RegisterType((*TermFilter)(nil), "TermFilter")
	proto.RegisterType((*RangeFilter)(nil), "RangeFilter")
	proto.RegisterType((*SortField)(nil), "SortField")
	proto.RegisterType((*VectorQuery)(nil), "VectorQuery")
	proto.RegisterType((*RetrievalParameters)(nil), "RetrievalParameters")
	proto.RegisterType((*SearchRequest)(nil), "SearchRequest")
	proto.RegisterMapType((map[string]string)(nil), "SearchRequest.SortFieldMapEntry")
	proto.RegisterType((*ResultItem)(nil), "ResultItem")
	proto.RegisterType((*SearchResult)(nil), "SearchResult")
	proto.RegisterMapType((map[uint32]string)(nil), "SearchResult.ExplainEntry")
	proto.RegisterType((*SearchResponse)(nil), "SearchResponse")
	proto.RegisterMapType((map[string]string)(nil), "SearchResponse.SortFieldMapEntry")
	proto.RegisterType((*SearchStatus)(nil), "SearchStatus")
	proto.RegisterType((*MSearchRequest)(nil), "MSearchRequest")
}

func init() { proto.RegisterFile("router_grpc.proto", fileDescriptor_535779cc1a17303a) }

var fileDescriptor_535779cc1a17303a = []byte{
	// 1878 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4d, 0x70, 0x1c, 0x47,
	0xf5, 0xdf, 0xd1, 0x7e, 0xbf, 0x99, 0x5d, 0x49, 0x6d, 0x57, 0x3c, 0x5e, 0xff, 0xb3, 0x92, 0xf7,
	0x5f, 0x21, 0x02, 0x93, 0x09, 0x11, 0x04, 0x88, 0x39, 0x40, 0x84, 0x2c, 0xdb, 0x15, 0xcb, 0x71,
	0x46, 0xb2, 0x53, 0x95, 0xcb, 0xd4, 0xec, 0x4c, 0x6b, 0x35, 0xa5, 0xf9, 0x52, 0x77, 0xcf, 0x46,
	0x9b, 0x13, 0x17, 0xaa, 0x38, 0x70, 0xa6, 0xe0, 0xc6, 0x0d, 0x0e, 0x54, 0x71, 0xcd, 0x81, 0x03,
	0xc7, 0x1c, 0x39, 0x72, 0x8c, 0xc4, 0x99, 0x2a, 0x8e, 0x1c, 0xa9, 0x7e, 0xdd, 0xb3, 0x3b, 0x6b,
	0x1b, 0x2c, 0x55, 0x39, 0xa7, 0xed, 0xf7, 0x39, 0xaf, 0xbb, 0x7f, 0xef, 0xbd, 0x7e, 0x0b, 0xeb,
	0x2c, 0x2b, 0x04, 0x65, 0xde, 0x84, 0xe5, 0x81, 0x93, 0xb3, 0x4c, 0x64, 0x83, 0xb5, 0xd0, 0x17,
	0xbe, 0x97, 0x64, 0x21, 0x8d, 0x35, 0xc7, 0xa2, 0x8c, 0x65, 0x8c, 0x6b, 0xea, 0x9d, 0x49, 0x24,
	0x8e, 0x8b, 0xb1, 0x13, 0x64, 0xc9, 0xbb, 0x93, 0x6c, 0x92, 0xbd, 0x8b, 0xec, 0x71, 0x71, 0x84,
	0x14, 0x12, 0xb8, 0x52, 0xea, 0xa3, 0x3f, 0xad, 0x80, 0xe9, 0xd2, 0xd3, 0x82, 0x72, 0xf1, 0x80,
	0xfa, 0x21, 0x19, 0x82, 0x29, 0xa2, 0x84, 0x7a, 0x59, 0x21, 0xbc, 0x84, 0xdb, 0xc6, 0xa6, 0xb1,
	0x55, 0x77, 0xbb, 0x92, 0xf5, 0x71, 0x21, 0xf6, 0x39, 0xb9, 0x05, 0xdd, 0x82, 0x53, 0xe6, 0xa5,
	0x7e, 0x42, 0xed, 0x95, 0x4d, 0x63, 0xab, 0xeb, 0x76, 0x24, 0xe3, 0xb1, 0x9f, 0x50, 0x32, 0x80,
	0x4e, 0xee, 0x73, 0xfe, 0x79, 0xc6, 0x42, 0xbb, 0xae, 0x64, 0x25, 0x4d, 0x6e, 0x40, 0x3b, 0x1c,
	0x2b, 0xb3, 0x06, 0x8a, 0x5a, 0xe1, 0x18, 0x8d, 0xde, 0x04, 0xe0, 0xb9, 0x1f, 0x50, 0x25, 0x6b,
	0xa2, 0xac, 0x8b, 0x1c, 0x14, 0x6f, 0x80, 0x19, 0xc4, 0x11, 0x4d, 0x85, 0x27, 0x66, 0x39, 0xb5,
	0x5b, 0x28, 0x07, 0xc5, 0x3a, 0x9c, 0xe5, 0x94, 0x7c, 0x0f, 0x5a, 0xb9, 0xcf, 0xfc, 0x84, 0xdb,
	0xed, 0xcd, 0xfa, 0x96, 0xb9, 0x6d, 0x3b, 0x95, 0xfd, 0x38, 0x4f, 0x50, 0x74, 0x2f, 0x15, 0x6c,
	0xe6, 0x6a, 0xbd, 0xc1, 0x07, 0x60, 0x56, 0xd8, 0x64, 0x0d, 0xea, 0x27, 0x74, 0x86, 0x5b, 0xed,
	0xba, 0x72, 0x49, 0xae, 0x43, 0x73, 0xea, 0xc7, 0x45, 0xb9, 0x41, 0x45, 0xdc, 0x5d, 0xf9, 0xb1,
	0x31, 0xfa, 0x8d, 0x01, 0x96, 0x4b, 0x79, 0x9e, 0xa5, 0x9c, 0xe2, 0x79, 0xd9, 0x50, 0xa7, 0x8c,
	0xa1, 0xb1, 0xb9, 0xdd, 0x72, 0xee, 0xc9, 0xab, 0x70, 0x25, 0x8b, 0xbc, 0x37, 0x8f, 0xab, 0x8e,
	0x71, 0xdd, 0x74, 0xaa, 0x86, 0xaf, 0x3b, 0xb0, 0x4f, 0x01, 0xee, 0x53, 0xa1, 0x77, 0x4e, 0x36,
	0xa1, 0x71, 0x4c, 0xfd, 0x50, 0x87, 0x65, 0x55, 0x4f, 0xc4, 0x45, 0x09, 0xb9, 0x0d, 0x56, 0xce,
	0xa2, 0xc4, 0x67, 0x33, 0xef, 0x84, 0xce, 0xb8, 0xdd, 0xd8, 0xac, 0x6f, 0x75, 0x5d, 0x53, 0xf3,
	0x3e, 0xa2, 0x33, 0x7e, 0xb7, 0xf1, 0xab, 0xdf, 0x6f, 0x18, 0xa3, 0xcf, 0xa0, 0xb7, 0x4b, 0x63,
	0x2a, 0xe8, 0x37, 0xe0, 0xfb, 0x13, 0x80, 0x0f, 0xc3, 0xf0, 0xf2, 0x8e, 0x6f, 0x41, 0x3d, 0xcc,
	0x02, 0xc4, 0x8f, 0xb9, 0xdd, 0x75, 0x76, 0xb3, 0xa0, 0x48, 0x68, 0x2a, 0x5c, 0xc9, 0xd5, 0x2e,
	0x0f, 0xa1, 0xf7, 0x34, 0x0f, 0xfd, 0xab, 0x84, 0x7b, 0x29, 0xaf, 0xe6, 0x4e, 0x11, 0x9f, 0x5c,
	0xde, 0xe7, 0x9b, 0xd0, 0x08, 0xb3, 0x40, 0x6d, 0x7d, 0xc9, 0x29, 0xb2, 0xb5, 0xd7, 0x9f, 0xc0,
	0xfa, 0x5e, 0xc6, 0x02, 0xba, 0x4f, 0xd9, 0xe4, 0xf2, 0xf1, 0x6a, 0xe3, 0x1f, 0x82, 0xb5, 0x17,
	0x17, 0xfc, 0xf8, 0xaa, 0x76, 0x07, 0x60, 0x22, 0x50, 0x14, 0x14, 0xc9, 0xed, 0x25, 0xb3, 0xde,
	0x12, 0x46, 0xe7, 0xe7, 0xd3, 0x8c, 0x04, 0x4d, 0xb8, 0xbd, 0x82, 0x9b, 0x69, 0x3a, 0x0f, 0x05,
	0x4d, 0x5c, 0xc5, 0xd3, 0x4e, 0x3f, 0x05, 0x13, 0x2f, 0xf2, 0xf2, 0x4e, 0x37, 0xc0, 0xac, 0x60,
	0x44, 0x97, 0x04, 0x58, 0x40, 0x44, 0x3b, 0xfe, 0x00, 0xfa, 0xe5, 0x75, 0x5e, 0xda, 0xb7, 0x36,
	0x7d, 0x06, 0xfd, 0x12, 0xb8, 0xaf, 0x75, 0xaf, 0x87, 0x60, 0x29, 0x2c, 0xbc, 0x56, 0xaf, 0x21,
	0x90, 0x2a, 0x16, 0x2e, 0xef, 0xfb, 0x2d, 0x68, 0xf1, 0x63, 0x9f, 0x85, 0x1c, 0x6b, 0x82, 0x54,
	0x3a, 0xa0, 0x3e, 0x0b, 0x8e, 0x0f, 0x84, 0x2f, 0x0a, 0xee, 0x6a, 0xe1, 0xfc, 0x4c, 0xae, 0xed,
	0xd2, 0x78, 0x67, 0xf6, 0x49, 0x41, 0xd9, 0xec, 0x4a, 0x9f, 0x79, 0x03, 0x5a, 0xbb, 0x34, 0x7e,
	0x5c, 0x24, 0xf8, 0x99, 0xa6, 0xab, 0x29, 0xed, 0xd7, 0x83, 0x9e, 0x06, 0xe3, 0x37, 0x14, 0xf8,
	0x01, 0xc0, 0x21, 0x65, 0xc9, 0x5e, 0x14, 0x0b, 0xca, 0x64, 0x19, 0x3c, 0x8a, 0x68, 0x1c, 0xea,
	0xd2, 0xa8, 0x88, 0xe5, 0xe2, 0x68, 0xe9, 0xe2, 0x48, 0x6e, 0x42, 0x27, 0xe2, 0x5e, 0x91, 0x46,
	0x59, 0x8a, 0x3d, 0xa9, 0xe9, 0xb6, 0x23, 0xfe, 0x54, 0x92, 0xa3, 0x3f, 0x1b, 0x60, 0xba, 0x7e,
	0x3a, 0xa1, 0xff, 0xd3, 0xed, 0x06, 0x98, 0x71, 0xf6, 0x39, 0x65, 0x5e, 0xd5, 0x39, 0x20, 0xeb,
	0x19, 0x7e, 0x61, 0x03, 0xcc, 0x22, 0xcf, 0xe7, 0x0a, 0x75, 0xa5, 0x80, 0x2c, 0xa5, 0xf0, 0xff,
	0xd0, 0x8b, 0xd2, 0x20, 0x2e, 0x42, 0xea, 0xa1, 0x19, 0xa2, 0xbd, 0xe3, 0x5a, 0x9a, 0xf9, 0x48,
	0xf2, 0xaa, 0x4a, 0x68, 0x8a, 0x9d, 0x70, 0xa1, 0xf4, 0x54, 0xf2, 0x46, 0xef, 0x43, 0xf7, 0x20,
	0x63, 0x62, 0xaf, 0xdc, 0xef, 0x4b, 0xc2, 0x25, 0xd0, 0xc0, 0x46, 0xb9, 0x82, 0xe6, 0xb8, 0x1e,
	0xfd, 0xc5, 0x00, 0xf3, 0x19, 0x0d, 0x44, 0xc6, 0xf0, 0xe2, 0xa5, 0x0e, 0x36, 0x5b, 0x65, 0x88,
	0xeb, 0xff, 0x72, 0x7a, 0xb7, 0xa0, 0x9b, 0x44, 0xa9, 0xc7, 0x83, 0x8c, 0xa9, 0x9d, 0x19, 0x6e,
	0x27, 0x89, 0xd2, 0x03, 0x49, 0xa3, 0xd0, 0x3f, 0xd3, 0xc2, 0x86, 0x16, 0xfa, 0x67, 0x4a, 0x78,
	0x1d, 0x9a, 0xe3, 0x2c, 0xe3, 0x02, 0xf7, 0x61, 0xb8, 0x8a, 0x90, 0x26, 0xc7, 0x3e, 0xf7, 0x94,
	0xa4, 0x85, 0xd7, 0xd1, 0x39, 0xf6, 0xf9, 0x0e, 0x0a, 0xdf, 0x80, 0xd6, 0x51, 0xc6, 0x12, 0x5f,
	0xd8, 0x6d, 0xf5, 0x42, 0x50, 0xd4, 0xe8, 0x0f, 0x06, 0x5c, 0x73, 0xa9, 0x60, 0x11, 0x9d, 0xfa,
	0x31, 0x36, 0x48, 0x2a, 0x28, 0xe3, 0xe4, 0x01, 0x98, 0x89, 0x64, 0x07, 0xea, 0x69, 0x20, 0x77,
	0xd3, 0xdf, 0x7e, 0xdb, 0x79, 0x89, 0xaa, 0xb3, 0x1b, 0x71, 0xe1, 0xa7, 0x32, 0xbd, 0xa4, 0xbe,
	0x7c, 0x37, 0xb8, 0x90, 0xcc, 0xd7, 0xf2, 0xcb, 0x69, 0xce, 0xb2, 0x31, 0x2d, 0xd1, 0xad, 0xa8,
	0x91, 0x03, 0xe4, 0x45, 0x4b, 0xb2, 0x06, 0xd6, 0xc3, 0x34, 0xa5, 0xec, 0x09, 0xcb, 0xc2, 0x22,
	0x10, 0x6b, 0x35, 0xd2, 0x82, 0x95, 0x47, 0xdb, 0x6b, 0xc6, 0xe8, 0x77, 0x2d, 0xe8, 0x29, 0x14,
	0x5f, 0xbe, 0x55, 0xdc, 0x80, 0x36, 0xa3, 0xa7, 0x5e, 0xba, 0x48, 0x2d, 0x46, 0x4f, 0x1f, 0x17,
	0x09, 0xde, 0x64, 0x96, 0x3f, 0xd6, 0xa8, 0xc5, 0x35, 0xf9, 0x16, 0xac, 0x46, 0xdc, 0x1b, 0xb3,
	0x42, 0x50, 0x8f, 0xe3, 0x87, 0xf0, 0xe0, 0x9b, 0x6e, 0x2f, 0xe2, 0x3b, 0x92, 0xab, 0xbe, 0x4e,
	0xee, 0x00, 0x4c, 0x69, 0xe0, 0x21, 0x24, 0xb8, 0xdd, 0xc4, 0xb2, 0x63, 0x39, 0x15, 0x0c, 0xb8,
	0xdd, 0x29, 0x0d, 0x10, 0x47, 0x1c, 0xcf, 0x5d, 0x29, 0xb6, 0xb0, 0x53, 0x6b, 0x8a, 0xbc, 0x07,
	0x3d, 0x26, 0xd3, 0xc3, 0x3b, 0xc2, 0xfc, 0x28, 0x1f, 0x58, 0x96, 0x53, 0x49, 0x1a, 0xd7, 0x62,
	0x0b, 0x82, 0x13, 0x07, 0x2c, 0x41, 0x59, 0x32, 0xb7, 0xe8, 0xa0, 0x85, 0xe9, 0x2c, 0x92, 0xd7,
	0x35, 0xc5, 0x7c, 0xcd, 0xc9, 0x16, 0xac, 0x65, 0x69, 0x1c, 0xa5, 0x32, 0x33, 0x26, 0x5e, 0x4c,
	0xa7, 0x34, 0xb6, 0xbb, 0x78, 0xf9, 0x7d, 0xc5, 0x7f, 0x94, 0x4d, 0x1e, 0x49, 0x2e, 0xf9, 0x36,
	0xac, 0xb1, 0xf2, 0x62, 0x3d, 0xfd, 0xb0, 0x02, 0xd4, 0x5c, 0x65, 0x4b, 0x17, 0xce, 0x65, 0xca,
	0x4b, 0x90, 0x31, 0x3f, 0x3d, 0xb1, 0x4d, 0x4c, 0x83, 0xf6, 0xb1, 0xcf, 0x5d, 0x3f, 0x3d, 0x21,
	0xdf, 0x81, 0xf5, 0xa4, 0x88, 0x45, 0xe4, 0x4d, 0xf1, 0x28, 0x94, 0x8e, 0x85, 0x27, 0xb8, 0x8a,
	0x02, 0x75, 0x44, 0xa8, 0xfb, 0x3e, 0xdc, 0x90, 0xdf, 0x89, 0x63, 0x1a, 0x7b, 0x63, 0x9f, 0xd3,
	0xd0, 0xcb, 0x52, 0xef, 0x54, 0x1e, 0x9e, 0xdd, 0x43, 0xaf, 0xd7, 0x4b, 0xf1, 0x8e, 0x94, 0x7e,
	0x9c, 0xaa, 0xe4, 0xba, 0x01, 0xed, 0x78, 0xdb, 0xe3, 0xa7, 0x4c, 0xd8, 0x7d, 0x54, 0x6b, 0xc5,
	0xdb, 0x07, 0xa7, 0x4c, 0x60, 0x25, 0x9a, 0x1e, 0x79, 0x47, 0xb1, 0x2f, 0xec, 0x55, 0x15, 0x56,
	0x34, 0x3d, 0xda, 0x8b, 0x7d, 0xa1, 0xaf, 0x55, 0xc7, 0xa4, 0xd2, 0x70, 0x0d, 0x35, 0x7a, 0x11,
	0x57, 0x11, 0xa9, 0x4a, 0xb2, 0x07, 0x7d, 0x9e, 0x31, 0xa1, 0xee, 0xd5, 0x4b, 0xfc, 0xdc, 0x5e,
	0xc7, 0x03, 0xde, 0x74, 0x96, 0x50, 0xe7, 0xcc, 0x8b, 0xc4, 0xbe, 0x9f, 0xab, 0x27, 0xa6, 0xc5,
	0x2b, 0x2c, 0x72, 0x07, 0xcc, 0x85, 0x1f, 0x6e, 0x13, 0x74, 0x02, 0x0b, 0x33, 0x17, 0xe6, 0xea,
	0x7c, 0xf0, 0x53, 0x58, 0x7f, 0xc1, 0xdf, 0x55, 0xde, 0xa6, 0xba, 0x84, 0xff, 0xd2, 0x00, 0x70,
	0x29, 0x2f, 0x62, 0x21, 0xbb, 0x9f, 0x54, 0x57, 0x85, 0xc3, 0x50, 0xf5, 0x01, 0x09, 0x32, 0x9c,
	0x43, 0x51, 0xb5, 0xca, 0x96, 0xa3, 0xe2, 0x29, 0x21, 0x79, 0x1d, 0x9a, 0xf4, 0x4c, 0x30, 0x5f,
	0x8f, 0x17, 0x8a, 0x20, 0xd7, 0xa0, 0x99, 0x57, 0x9e, 0x11, 0x8d, 0xfc, 0x23, 0x3a, 0x93, 0xa8,
	0xe6, 0x59, 0xc1, 0x02, 0x35, 0x53, 0x58, 0xae, 0xa6, 0x46, 0xbf, 0xae, 0x83, 0x55, 0x9e, 0x96,
	0x8c, 0x46, 0x0e, 0x20, 0x22, 0x13, 0x7e, 0xec, 0x1d, 0x47, 0x42, 0x4d, 0x3c, 0x4d, 0xb7, 0x8b,
	0x9c, 0x07, 0x91, 0xe0, 0xcb, 0x55, 0x6e, 0xe5, 0xb9, 0x2a, 0x77, 0x13, 0xe4, 0xda, 0x13, 0x59,
	0x76, 0x82, 0x21, 0xd5, 0xdd, 0x76, 0xe2, 0x9f, 0x1d, 0x66, 0xd9, 0x89, 0x9c, 0xa4, 0x4a, 0x91,
	0x17, 0x85, 0x18, 0x5a, 0xcf, 0xed, 0x6a, 0xe9, 0x43, 0xd5, 0xff, 0xb0, 0xd5, 0x61, 0x7c, 0x2f,
	0xe9, 0x7f, 0xf8, 0x2b, 0x0f, 0x3a, 0xe1, 0x13, 0x3d, 0xf7, 0xc8, 0xa5, 0xcc, 0x31, 0x86, 0x91,
	0x7b, 0xea, 0x51, 0xd1, 0xd6, 0x39, 0xb6, 0x38, 0x5c, 0xd7, 0x64, 0xf3, 0x35, 0x7a, 0xc8, 0x1f,
	0xee, 0xda, 0x1d, 0x0c, 0x40, 0x2e, 0xc9, 0x0f, 0xa0, 0x4d, 0xcf, 0xf2, 0xd8, 0x8f, 0x52, 0xbb,
	0x8b, 0xc6, 0x03, 0xa7, 0x7a, 0x22, 0xce, 0x3d, 0x25, 0x54, 0xc8, 0x29, 0x55, 0x89, 0x0d, 0x6d,
	0x39, 0x07, 0x66, 0x85, 0xc0, 0xc4, 0xeb, 0xb8, 0x25, 0x39, 0xb8, 0x0b, 0x56, 0xd5, 0xa4, 0x0a,
	0x8e, 0xde, 0xab, 0x06, 0x97, 0x7f, 0xae, 0x40, 0x7f, 0xfe, 0xf1, 0x4b, 0x3f, 0x1e, 0xde, 0x96,
	0x45, 0x53, 0xc6, 0x5a, 0x02, 0xa5, 0xb7, 0xb4, 0x03, 0xb7, 0x94, 0x92, 0xef, 0x02, 0xa9, 0x14,
	0x98, 0x84, 0x72, 0xee, 0x4f, 0xa8, 0x46, 0xcf, 0xda, 0xbc, 0xc4, 0xec, 0x2b, 0x7e, 0x75, 0x8b,
	0x8d, 0xa5, 0x2d, 0x92, 0xff, 0x83, 0xae, 0xcc, 0xd4, 0x9d, 0x99, 0xa0, 0x5c, 0x03, 0x6a, 0xc1,
	0x20, 0xf7, 0x5f, 0xc8, 0xcb, 0x16, 0x46, 0x75, 0xdb, 0x59, 0xde, 0xda, 0x2b, 0x13, 0xf3, 0x26,
	0x74, 0x44, 0x96, 0x7b, 0x3c, 0xfa, 0x82, 0x62, 0x13, 0x6c, 0xba, 0x6d, 0x91, 0xe5, 0x07, 0xd1,
	0x17, 0xf4, 0x75, 0xa5, 0x61, 0x5a, 0xa2, 0x5f, 0xe1, 0x4c, 0xea, 0x23, 0xd6, 0x35, 0xf0, 0x15,
	0x81, 0x2d, 0xc1, 0x8f, 0x62, 0x1a, 0x96, 0x3d, 0x49, 0x51, 0x64, 0x08, 0xc0, 0x8b, 0x20, 0xa0,
	0x9c, 0x1f, 0x15, 0xb1, 0xee, 0x4c, 0x15, 0x4e, 0x89, 0xd6, 0xc6, 0x1c, 0xad, 0xa3, 0x53, 0xe8,
	0xef, 0x5f, 0xb5, 0x25, 0xfe, 0x08, 0x56, 0x55, 0x73, 0xf3, 0x98, 0x92, 0x95, 0xb7, 0xdc, 0x5f,
	0xae, 0x73, 0x6e, 0x9f, 0x57, 0x49, 0xfd, 0x58, 0xdc, 0xfe, 0x72, 0x05, 0xd6, 0x5d, 0xfc, 0xe3,
	0xe4, 0xbe, 0xfb, 0xe4, 0xe7, 0x07, 0x94, 0x4d, 0xa3, 0x80, 0x92, 0x11, 0xd4, 0xef, 0x53, 0x41,
	0x4c, 0x67, 0x31, 0x27, 0x0f, 0x2c, 0xa7, 0x32, 0x0b, 0x8d, 0x6a, 0x52, 0xe7, 0xc3, 0x30, 0x24,
	0xa6, 0xb3, 0x18, 0x4b, 0x07, 0x96, 0x53, 0x19, 0x6d, 0x46, 0x35, 0x72, 0x07, 0x5f, 0xc2, 0x54,
	0x50, 0xd2, 0x77, 0x96, 0x26, 0xe3, 0xc1, 0xaa, 0xb3, 0x3c, 0x70, 0x28, 0x65, 0x35, 0xbf, 0x90,
	0xbe, 0xb3, 0x34, 0x97, 0x0e, 0x56, 0x9d, 0xe5, 0xc1, 0x46, 0x29, 0xeb, 0xf6, 0xfd, 0xdc, 0x3e,
	0x07, 0xab, 0xcf, 0xe1, 0x68, 0x54, 0x23, 0x6f, 0x41, 0x43, 0x8e, 0x21, 0xc4, 0x72, 0x2a, 0x93,
	0xe9, 0xa0, 0xe7, 0x54, 0x67, 0x93, 0x51, 0x8d, 0xbc, 0x03, 0x6d, 0x7d, 0xfc, 0x64, 0xd5, 0xd9,
	0x7f, 0x95, 0xd7, 0x9d, 0x9f, 0x7d, 0x75, 0x3e, 0xac, 0xfd, 0xfd, 0x7c, 0x58, 0xfb, 0xfa, 0x7c,
	0x58, 0xfb, 0xd7, 0xf9, 0xb0, 0xf6, 0xef, 0xf3, 0xa1, 0xf1, 0x8b, 0x8b, 0xa1, 0xf1, 0xc7, 0x8b,
	0xa1, 0xf1, 0xe5, 0xc5, 0xb0, 0xf6, 0xd7, 0x8b, 0x61, 0xed, 0xab, 0x8b, 0xa1, 0xf1, 0xb7, 0x8b,
	0xa1, 0xf1, 0xf5, 0xc5, 0xd0, 0xf8, 0xed, 0x3f, 0x86, 0xb5, 0x07, 0xc6, 0x67, 0x9d, 0x29, 0x7a,
	0xca, 0xc7, 0xe3, 0x16, 0xfe, 0xaf, 0xf4, 0xfd, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xed, 0x21,
	0x52, 0x56, 0xbb, 0x12, 0x00, 0x00,
}

func (this *RequestHead) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestHead)
	if !ok {
		that2, ok := that.(RequestHead)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimeOutMs != that1.TimeOutMs {
		return false
	}
	if this.UserName != that1.UserName {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.DbName != that1.DbName {
		return false
	}
	if this.SpaceName != that1.SpaceName {
		return false
	}
	if this.ClientType != that1.ClientType {
		return false
	}
	if len(this.Params) != len(that1.Params) {
		return false
	}
	for i := range this.Params {
		if this.Params[i] != that1.Params[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ResponseHead) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseHead)
	if !ok {
		that2, ok := that.(ResponseHead)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Err.Equal(that1.Err) {
		return false
	}
	if len(this.Params) != len(that1.Params) {
		return false
	}
	for i := range this.Params {
		if this.Params[i] != that1.Params[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRequest)
	if !ok {
		that2, ok := that.(GetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if len(this.PrimaryKeys) != len(that1.PrimaryKeys) {
		return false
	}
	for i := range this.PrimaryKeys {
		if this.PrimaryKeys[i] != that1.PrimaryKeys[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRequest)
	if !ok {
		that2, ok := that.(DeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if len(this.PrimaryKeys) != len(that1.PrimaryKeys) {
		return false
	}
	for i := range this.PrimaryKeys {
		if this.PrimaryKeys[i] != that1.PrimaryKeys[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AddRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddRequest)
	if !ok {
		that2, ok := that.(AddRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if !this.Doc.Equal(that1.Doc) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateRequest)
	if !ok {
		that2, ok := that.(UpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if !this.Doc.Equal(that1.Doc) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BulkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BulkRequest)
	if !ok {
		that2, ok := that.(BulkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if len(this.Docs) != len(that1.Docs) {
		return false
	}
	for i := range this.Docs {
		if !this.Docs[i].Equal(that1.Docs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ForceMergeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForceMergeRequest)
	if !ok {
		that2, ok := that.(ForceMergeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FlushRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlushRequest)
	if !ok {
		that2, ok := that.(FlushRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetResponse)
	if !ok {
		that2, ok := that.(GetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AddResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddResponse)
	if !ok {
		that2, ok := that.(AddResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if this.PrimaryKey != that1.PrimaryKey {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateResponse)
	if !ok {
		that2, ok := that.(UpdateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteResponse)
	if !ok {
		that2, ok := that.(DeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BulkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BulkResponse)
	if !ok {
		that2, ok := that.(BulkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ForceMergeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForceMergeResponse)
	if !ok {
		that2, ok := that.(ForceMergeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if !this.Shards.Equal(that1.Shards) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DelByQueryeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelByQueryeResponse)
	if !ok {
		that2, ok := that.(DelByQueryeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if this.DelNum != that1.DelNum {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FlushResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlushResponse)
	if !ok {
		that2, ok := that.(FlushResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if !this.Shards.Equal(that1.Shards) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TermFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TermFilter)
	if !ok {
		that2, ok := that.(TermFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	if this.IsUnion != that1.IsUnion {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RangeFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RangeFilter)
	if !ok {
		that2, ok := that.(RangeFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	if !bytes.Equal(this.LowerValue, that1.LowerValue) {
		return false
	}
	if !bytes.Equal(this.UpperValue, that1.UpperValue) {
		return false
	}
	if this.IncludeLower != that1.IncludeLower {
		return false
	}
	if this.IncludeUpper != that1.IncludeUpper {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SortField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SortField)
	if !ok {
		that2, ok := that.(SortField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VectorQuery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VectorQuery)
	if !ok {
		that2, ok := that.(VectorQuery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	if this.MinScore != that1.MinScore {
		return false
	}
	if this.MaxScore != that1.MaxScore {
		return false
	}
	if this.Boost != that1.Boost {
		return false
	}
	if this.HasBoost != that1.HasBoost {
		return false
	}
	if this.Format != that1.Format {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RetrievalParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrievalParameters)
	if !ok {
		that2, ok := that.(RetrievalParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MetricType != that1.MetricType {
		return false
	}
	if this.Nprobe != that1.Nprobe {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SearchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchRequest)
	if !ok {
		that2, ok := that.(SearchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if this.ReqNum != that1.ReqNum {
		return false
	}
	if this.TopN != that1.TopN {
		return false
	}
	if this.IsBruteSearch != that1.IsBruteSearch {
		return false
	}
	if len(this.VecFields) != len(that1.VecFields) {
		return false
	}
	for i := range this.VecFields {
		if !this.VecFields[i].Equal(that1.VecFields[i]) {
			return false
		}
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if this.Fields[i] != that1.Fields[i] {
			return false
		}
	}
	if len(this.RangeFilters) != len(that1.RangeFilters) {
		return false
	}
	for i := range this.RangeFilters {
		if !this.RangeFilters[i].Equal(that1.RangeFilters[i]) {
			return false
		}
	}
	if len(this.TermFilters) != len(that1.TermFilters) {
		return false
	}
	for i := range this.TermFilters {
		if !this.TermFilters[i].Equal(that1.TermFilters[i]) {
			return false
		}
	}
	if this.OnlineLogLevel != that1.OnlineLogLevel {
		return false
	}
	if this.RetrievalParams != that1.RetrievalParams {
		return false
	}
	if this.HasRank != that1.HasRank {
		return false
	}
	if this.MultiVectorRank != that1.MultiVectorRank {
		return false
	}
	if this.ParallelBasedOnQuery != that1.ParallelBasedOnQuery {
		return false
	}
	if this.L2Sqrt != that1.L2Sqrt {
		return false
	}
	if this.IvfFlat != that1.IvfFlat {
		return false
	}
	if this.IsVectorValue != that1.IsVectorValue {
		return false
	}
	if len(this.SortFieldMap) != len(that1.SortFieldMap) {
		return false
	}
	for i := range this.SortFieldMap {
		if this.SortFieldMap[i] != that1.SortFieldMap[i] {
			return false
		}
	}
	if len(this.SortFields) != len(that1.SortFields) {
		return false
	}
	for i := range this.SortFields {
		if !this.SortFields[i].Equal(that1.SortFields[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ResultItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResultItem)
	if !ok {
		that2, ok := that.(ResultItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	if this.Extra != that1.Extra {
		return false
	}
	if this.PKey != that1.PKey {
		return false
	}
	if !bytes.Equal(this.Source, that1.Source) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SearchResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchResult)
	if !ok {
		that2, ok := that.(SearchResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalHits != that1.TotalHits {
		return false
	}
	if this.MaxScore != that1.MaxScore {
		return false
	}
	if this.MaxTook != that1.MaxTook {
		return false
	}
	if this.MaxTookId != that1.MaxTookId {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if len(this.ResultItems) != len(that1.ResultItems) {
		return false
	}
	for i := range this.ResultItems {
		if !this.ResultItems[i].Equal(that1.ResultItems[i]) {
			return false
		}
	}
	if this.PID != that1.PID {
		return false
	}
	if len(this.Explain) != len(that1.Explain) {
		return false
	}
	for i := range this.Explain {
		if this.Explain[i] != that1.Explain[i] {
			return false
		}
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SearchResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchResponse)
	if !ok {
		that2, ok := that.(SearchResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if !this.Results[i].Equal(that1.Results[i]) {
			return false
		}
	}
	if this.OnlineLogMessage != that1.OnlineLogMessage {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if !bytes.Equal(this.FlatBytes, that1.FlatBytes) {
		return false
	}
	if len(this.SortFieldMap) != len(that1.SortFieldMap) {
		return false
	}
	for i := range this.SortFieldMap {
		if this.SortFieldMap[i] != that1.SortFieldMap[i] {
			return false
		}
	}
	if this.TopSize != that1.TopSize {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SearchStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchStatus)
	if !ok {
		that2, ok := that.(SearchStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if this.Failed != that1.Failed {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MSearchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MSearchRequest)
	if !ok {
		that2, ok := that.(MSearchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if len(this.SearchRequests) != len(that1.SearchRequests) {
		return false
	}
	for i := range this.SearchRequests {
		if !this.SearchRequests[i].Equal(that1.SearchRequests[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouterGRPCServiceClient is the client API for RouterGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterGRPCServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Bulk(ctx context.Context, in *BulkRequest, opts ...grpc.CallOption) (*BulkResponse, error)
	MSearch(ctx context.Context, in *MSearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type routerGRPCServiceClient struct {
	cc *grpc.ClientConn
}

func NewRouterGRPCServiceClient(cc *grpc.ClientConn) RouterGRPCServiceClient {
	return &routerGRPCServiceClient{cc}
}

func (c *routerGRPCServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/RouterGRPCService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerGRPCServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/RouterGRPCService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerGRPCServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/RouterGRPCService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerGRPCServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/RouterGRPCService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerGRPCServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/RouterGRPCService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerGRPCServiceClient) Bulk(ctx context.Context, in *BulkRequest, opts ...grpc.CallOption) (*BulkResponse, error) {
	out := new(BulkResponse)
	err := c.cc.Invoke(ctx, "/RouterGRPCService/Bulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerGRPCServiceClient) MSearch(ctx context.Context, in *MSearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/RouterGRPCService/MSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterGRPCServiceServer is the server API for RouterGRPCService service.
type RouterGRPCServiceServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Bulk(context.Context, *BulkRequest) (*BulkResponse, error)
	MSearch(context.Context, *MSearchRequest) (*SearchResponse, error)
}

// UnimplementedRouterGRPCServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRouterGRPCServiceServer struct {
}

func (*UnimplementedRouterGRPCServiceServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRouterGRPCServiceServer) Add(ctx context.Context, req *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedRouterGRPCServiceServer) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedRouterGRPCServiceServer) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedRouterGRPCServiceServer) Search(ctx context.Context, req *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedRouterGRPCServiceServer) Bulk(ctx context.Context, req *BulkRequest) (*BulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bulk not implemented")
}
func (*UnimplementedRouterGRPCServiceServer) MSearch(ctx context.Context, req *MSearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSearch not implemented")
}

func RegisterRouterGRPCServiceServer(s *grpc.Server, srv RouterGRPCServiceServer) {
	s.RegisterService(&_RouterGRPCService_serviceDesc, srv)
}

func _RouterGRPCService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterGRPCServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RouterGRPCService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterGRPCServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterGRPCService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterGRPCServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RouterGRPCService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterGRPCServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterGRPCService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterGRPCServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RouterGRPCService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterGRPCServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterGRPCService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterGRPCServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RouterGRPCService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterGRPCServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterGRPCService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterGRPCServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RouterGRPCService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterGRPCServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterGRPCService_Bulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterGRPCServiceServer).Bulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RouterGRPCService/Bulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterGRPCServiceServer).Bulk(ctx, req.(*BulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterGRPCService_MSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterGRPCServiceServer).MSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RouterGRPCService/MSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterGRPCServiceServer).MSearch(ctx, req.(*MSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouterGRPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RouterGRPCService",
	HandlerType: (*RouterGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RouterGRPCService_Get_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _RouterGRPCService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RouterGRPCService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RouterGRPCService_Update_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _RouterGRPCService_Search_Handler,
		},
		{
			MethodName: "Bulk",
			Handler:    _RouterGRPCService_Bulk_Handler,
		},
		{
			MethodName: "MSearch",
			Handler:    _RouterGRPCService_MSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "router_grpc.proto",
}

func (m *RequestHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRouterGrpc(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRouterGrpc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRouterGrpc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ClientType) > 0 {
		i -= len(m.ClientType)
		copy(dAtA[i:], m.ClientType)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.ClientType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SpaceName) > 0 {
		i -= len(m.SpaceName)
		copy(dAtA[i:], m.SpaceName)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.SpaceName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DbName) > 0 {
		i -= len(m.DbName)
		copy(dAtA[i:], m.DbName)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.DbName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.TimeOutMs != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.TimeOutMs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRouterGrpc(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRouterGrpc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRouterGrpc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrimaryKeys) > 0 {
		for iNdEx := len(m.PrimaryKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrimaryKeys[iNdEx])
			copy(dAtA[i:], m.PrimaryKeys[iNdEx])
			i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.PrimaryKeys[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrimaryKeys) > 0 {
		for iNdEx := len(m.PrimaryKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrimaryKeys[iNdEx])
			copy(dAtA[i:], m.PrimaryKeys[iNdEx])
			i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.PrimaryKeys[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Doc != nil {
		{
			size, err := m.Doc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Doc != nil {
		{
			size, err := m.Doc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BulkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BulkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BulkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Docs) > 0 {
		for iNdEx := len(m.Docs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Docs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ForceMergeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceMergeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForceMergeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlushRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlushRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrimaryKey) > 0 {
		i -= len(m.PrimaryKey)
		copy(dAtA[i:], m.PrimaryKey)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.PrimaryKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BulkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BulkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BulkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ForceMergeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceMergeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForceMergeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Shards != nil {
		{
			size, err := m.Shards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelByQueryeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelByQueryeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelByQueryeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DelNum != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.DelNum))
		i--
		dAtA[i] = 0x10
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlushResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlushResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Shards != nil {
		{
			size, err := m.Shards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TermFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TermFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TermFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsUnion != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.IsUnion))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RangeFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IncludeUpper {
		i--
		if m.IncludeUpper {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IncludeLower {
		i--
		if m.IncludeLower {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.UpperValue) > 0 {
		i -= len(m.UpperValue)
		copy(dAtA[i:], m.UpperValue)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.UpperValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LowerValue) > 0 {
		i -= len(m.LowerValue)
		copy(dAtA[i:], m.LowerValue)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.LowerValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SortField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SortField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type {
		i--
		if m.Type {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VectorQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VectorQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VectorQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0x3a
	}
	if m.HasBoost != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.HasBoost))
		i--
		dAtA[i] = 0x30
	}
	if m.Boost != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Boost))))
		i--
		dAtA[i] = 0x29
	}
	if m.MaxScore != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxScore))))
		i--
		dAtA[i] = 0x21
	}
	if m.MinScore != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinScore))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrievalParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrievalParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrievalParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nprobe != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.Nprobe))
		i--
		dAtA[i] = 0x10
	}
	if m.MetricType != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.MetricType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SortFields) > 0 {
		for iNdEx := len(m.SortFields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SortFields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.SortFieldMap) > 0 {
		for k := range m.SortFieldMap {
			v := m.SortFieldMap[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRouterGrpc(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRouterGrpc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRouterGrpc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.IsVectorValue {
		i--
		if m.IsVectorValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.IvfFlat {
		i--
		if m.IvfFlat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.L2Sqrt {
		i--
		if m.L2Sqrt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.ParallelBasedOnQuery {
		i--
		if m.ParallelBasedOnQuery {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.MultiVectorRank != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.MultiVectorRank))
		i--
		dAtA[i] = 0x60
	}
	if m.HasRank {
		i--
		if m.HasRank {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.RetrievalParams) > 0 {
		i -= len(m.RetrievalParams)
		copy(dAtA[i:], m.RetrievalParams)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.RetrievalParams)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.OnlineLogLevel) > 0 {
		i -= len(m.OnlineLogLevel)
		copy(dAtA[i:], m.OnlineLogLevel)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.OnlineLogLevel)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TermFilters) > 0 {
		for iNdEx := len(m.TermFilters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TermFilters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.RangeFilters) > 0 {
		for iNdEx := len(m.RangeFilters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RangeFilters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.VecFields) > 0 {
		for iNdEx := len(m.VecFields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VecFields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.IsBruteSearch != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.IsBruteSearch))
		i--
		dAtA[i] = 0x20
	}
	if m.TopN != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.TopN))
		i--
		dAtA[i] = 0x18
	}
	if m.ReqNum != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.ReqNum))
		i--
		dAtA[i] = 0x10
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResultItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResultItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PKey) > 0 {
		i -= len(m.PKey)
		copy(dAtA[i:], m.PKey)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.PKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Score != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *SearchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timeout {
		i--
		if m.Timeout {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.Explain) > 0 {
		for k := range m.Explain {
			v := m.Explain[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRouterGrpc(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintRouterGrpc(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRouterGrpc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.PID != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.PID))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ResultItems) > 0 {
		for iNdEx := len(m.ResultItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResultItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxTookId != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.MaxTookId))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxTook != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.MaxTook))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxScore != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxScore))))
		i--
		dAtA[i] = 0x11
	}
	if m.TotalHits != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.TotalHits))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TopSize != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.TopSize))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SortFieldMap) > 0 {
		for k := range m.SortFieldMap {
			v := m.SortFieldMap[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRouterGrpc(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRouterGrpc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRouterGrpc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.FlatBytes) > 0 {
		i -= len(m.FlatBytes)
		copy(dAtA[i:], m.FlatBytes)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.FlatBytes)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Timeout {
		i--
		if m.Timeout {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.OnlineLogMessage) > 0 {
		i -= len(m.OnlineLogMessage)
		copy(dAtA[i:], m.OnlineLogMessage)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.OnlineLogMessage)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintRouterGrpc(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x22
	}
	if m.Successful != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.Successful))
		i--
		dAtA[i] = 0x18
	}
	if m.Failed != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.Failed))
		i--
		dAtA[i] = 0x10
	}
	if m.Total != 0 {
		i = encodeVarintRouterGrpc(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MSearchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSearchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MSearchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SearchRequests) > 0 {
		for iNdEx := len(m.SearchRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SearchRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouterGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRouterGrpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRouterGrpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedRequestHead(r randyRouterGrpc, easy bool) *RequestHead {
	this := &RequestHead{}
	this.TimeOutMs = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.TimeOutMs *= -1
	}
	this.UserName = string(randStringRouterGrpc(r))
	this.Password = string(randStringRouterGrpc(r))
	this.DbName = string(randStringRouterGrpc(r))
	this.SpaceName = string(randStringRouterGrpc(r))
	this.ClientType = string(randStringRouterGrpc(r))
	if r.Intn(5) != 0 {
		v1 := r.Intn(10)
		this.Params = make(map[string]string)
		for i := 0; i < v1; i++ {
			this.Params[randStringRouterGrpc(r)] = randStringRouterGrpc(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 8)
	}
	return this
}

func NewPopulatedResponseHead(r randyRouterGrpc, easy bool) *ResponseHead {
	this := &ResponseHead{}
	if r.Intn(5) != 0 {
		this.Err = NewPopulatedError(r, easy)
	}
	if r.Intn(5) != 0 {
		v2 := r.Intn(10)
		this.Params = make(map[string]string)
		for i := 0; i < v2; i++ {
			this.Params[randStringRouterGrpc(r)] = randStringRouterGrpc(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 4)
	}
	return this
}

func NewPopulatedGetRequest(r randyRouterGrpc, easy bool) *GetRequest {
	this := &GetRequest{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedRequestHead(r, easy)
	}
	v3 := r.Intn(10)
	this.PrimaryKeys = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.PrimaryKeys[i] = string(randStringRouterGrpc(r))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 5)
	}
	return this
}

func NewPopulatedDeleteRequest(r randyRouterGrpc, easy bool) *DeleteRequest {
	this := &DeleteRequest{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedRequestHead(r, easy)
	}
	v4 := r.Intn(10)
	this.PrimaryKeys = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.PrimaryKeys[i] = string(randStringRouterGrpc(r))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 5)
	}
	return this
}

func NewPopulatedAddRequest(r randyRouterGrpc, easy bool) *AddRequest {
	this := &AddRequest{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedRequestHead(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Doc = NewPopulatedDocument(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 5)
	}
	return this
}

func NewPopulatedUpdateRequest(r randyRouterGrpc, easy bool) *UpdateRequest {
	this := &UpdateRequest{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedRequestHead(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Doc = NewPopulatedDocument(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 5)
	}
	return this
}

func NewPopulatedBulkRequest(r randyRouterGrpc, easy bool) *BulkRequest {
	this := &BulkRequest{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedRequestHead(r, easy)
	}
	if r.Intn(5) != 0 {
		v5 := r.Intn(5)
		this.Docs = make([]*Document, v5)
		for i := 0; i < v5; i++ {
			this.Docs[i] = NewPopulatedDocument(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 5)
	}
	return this
}

func NewPopulatedForceMergeRequest(r randyRouterGrpc, easy bool) *ForceMergeRequest {
	this := &ForceMergeRequest{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedRequestHead(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 2)
	}
	return this
}

func NewPopulatedFlushRequest(r randyRouterGrpc, easy bool) *FlushRequest {
	this := &FlushRequest{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedRequestHead(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 2)
	}
	return this
}

func NewPopulatedGetResponse(r randyRouterGrpc, easy bool) *GetResponse {
	this := &GetResponse{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedResponseHead(r, easy)
	}
	if r.Intn(5) != 0 {
		v6 := r.Intn(5)
		this.Items = make([]*Item, v6)
		for i := 0; i < v6; i++ {
			this.Items[i] = NewPopulatedItem(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 3)
	}
	return this
}

func NewPopulatedAddResponse(r randyRouterGrpc, easy bool) *AddResponse {
	this := &AddResponse{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedResponseHead(r, easy)
	}
	this.PrimaryKey = string(randStringRouterGrpc(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 5)
	}
	return this
}

func NewPopulatedUpdateResponse(r randyRouterGrpc, easy bool) *UpdateResponse {
	this := &UpdateResponse{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedResponseHead(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 2)
	}
	return this
}

func NewPopulatedDeleteResponse(r randyRouterGrpc, easy bool) *DeleteResponse {
	this := &DeleteResponse{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedResponseHead(r, easy)
	}
	if r.Intn(5) != 0 {
		v7 := r.Intn(5)
		this.Items = make([]*Item, v7)
		for i := 0; i < v7; i++ {
			this.Items[i] = NewPopulatedItem(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 3)
	}
	return this
}

func NewPopulatedBulkResponse(r randyRouterGrpc, easy bool) *BulkResponse {
	this := &BulkResponse{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedResponseHead(r, easy)
	}
	if r.Intn(5) != 0 {
		v8 := r.Intn(5)
		this.Items = make([]*Item, v8)
		for i := 0; i < v8; i++ {
			this.Items[i] = NewPopulatedItem(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 3)
	}
	return this
}

func NewPopulatedForceMergeResponse(r randyRouterGrpc, easy bool) *ForceMergeResponse {
	this := &ForceMergeResponse{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedResponseHead(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Shards = NewPopulatedSearchStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 3)
	}
	return this
}

func NewPopulatedDelByQueryeResponse(r randyRouterGrpc, easy bool) *DelByQueryeResponse {
	this := &DelByQueryeResponse{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedResponseHead(r, easy)
	}
	this.DelNum = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.DelNum *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 3)
	}
	return this
}

func NewPopulatedFlushResponse(r randyRouterGrpc, easy bool) *FlushResponse {
	this := &FlushResponse{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedResponseHead(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Shards = NewPopulatedSearchStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 3)
	}
	return this
}

func NewPopulatedTermFilter(r randyRouterGrpc, easy bool) *TermFilter {
	this := &TermFilter{}
	this.Field = string(randStringRouterGrpc(r))
	v9 := r.Intn(100)
	this.Value = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	this.IsUnion = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.IsUnion *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 4)
	}
	return this
}

func NewPopulatedRangeFilter(r randyRouterGrpc, easy bool) *RangeFilter {
	this := &RangeFilter{}
	this.Field = string(randStringRouterGrpc(r))
	v10 := r.Intn(100)
	this.LowerValue = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.LowerValue[i] = byte(r.Intn(256))
	}
	v11 := r.Intn(100)
	this.UpperValue = make([]byte, v11)
	for i := 0; i < v11; i++ {
		this.UpperValue[i] = byte(r.Intn(256))
	}
	this.IncludeLower = bool(bool(r.Intn(2) == 0))
	this.IncludeUpper = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 6)
	}
	return this
}

func NewPopulatedSortField(r randyRouterGrpc, easy bool) *SortField {
	this := &SortField{}
	this.Field = string(randStringRouterGrpc(r))
	this.Type = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 3)
	}
	return this
}

func NewPopulatedVectorQuery(r randyRouterGrpc, easy bool) *VectorQuery {
	this := &VectorQuery{}
	this.Name = string(randStringRouterGrpc(r))
	v12 := r.Intn(100)
	this.Value = make([]byte, v12)
	for i := 0; i < v12; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	this.MinScore = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.MinScore *= -1
	}
	this.MaxScore = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.MaxScore *= -1
	}
	this.Boost = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Boost *= -1
	}
	this.HasBoost = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.HasBoost *= -1
	}
	this.Format = string(randStringRouterGrpc(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 8)
	}
	return this
}

func NewPopulatedRetrievalParameters(r randyRouterGrpc, easy bool) *RetrievalParameters {
	this := &RetrievalParameters{}
	this.MetricType = RetrievalParameters_DistanceMetricType([]int32{0, 1}[r.Intn(2)])
	this.Nprobe = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Nprobe *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 3)
	}
	return this
}

func NewPopulatedSearchRequest(r randyRouterGrpc, easy bool) *SearchRequest {
	this := &SearchRequest{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedRequestHead(r, easy)
	}
	this.ReqNum = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ReqNum *= -1
	}
	this.TopN = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.TopN *= -1
	}
	this.IsBruteSearch = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.IsBruteSearch *= -1
	}
	if r.Intn(5) != 0 {
		v13 := r.Intn(5)
		this.VecFields = make([]*VectorQuery, v13)
		for i := 0; i < v13; i++ {
			this.VecFields[i] = NewPopulatedVectorQuery(r, easy)
		}
	}
	v14 := r.Intn(10)
	this.Fields = make([]string, v14)
	for i := 0; i < v14; i++ {
		this.Fields[i] = string(randStringRouterGrpc(r))
	}
	if r.Intn(5) != 0 {
		v15 := r.Intn(5)
		this.RangeFilters = make([]*RangeFilter, v15)
		for i := 0; i < v15; i++ {
			this.RangeFilters[i] = NewPopulatedRangeFilter(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v16 := r.Intn(5)
		this.TermFilters = make([]*TermFilter, v16)
		for i := 0; i < v16; i++ {
			this.TermFilters[i] = NewPopulatedTermFilter(r, easy)
		}
	}
	this.OnlineLogLevel = string(randStringRouterGrpc(r))
	this.RetrievalParams = string(randStringRouterGrpc(r))
	this.HasRank = bool(bool(r.Intn(2) == 0))
	this.MultiVectorRank = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MultiVectorRank *= -1
	}
	this.ParallelBasedOnQuery = bool(bool(r.Intn(2) == 0))
	this.L2Sqrt = bool(bool(r.Intn(2) == 0))
	this.IvfFlat = bool(bool(r.Intn(2) == 0))
	this.IsVectorValue = bool(bool(r.Intn(2) == 0))
	if r.Intn(5) != 0 {
		v17 := r.Intn(10)
		this.SortFieldMap = make(map[string]string)
		for i := 0; i < v17; i++ {
			this.SortFieldMap[randStringRouterGrpc(r)] = randStringRouterGrpc(r)
		}
	}
	if r.Intn(5) != 0 {
		v18 := r.Intn(5)
		this.SortFields = make([]*SortField, v18)
		for i := 0; i < v18; i++ {
			this.SortFields[i] = NewPopulatedSortField(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 19)
	}
	return this
}

func NewPopulatedResultItem(r randyRouterGrpc, easy bool) *ResultItem {
	this := &ResultItem{}
	this.Score = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Score *= -1
	}
	if r.Intn(5) != 0 {
		v19 := r.Intn(5)
		this.Fields = make([]*Field, v19)
		for i := 0; i < v19; i++ {
			this.Fields[i] = NewPopulatedField(r, easy)
		}
	}
	this.Extra = string(randStringRouterGrpc(r))
	this.PKey = string(randStringRouterGrpc(r))
	v20 := r.Intn(100)
	this.Source = make([]byte, v20)
	for i := 0; i < v20; i++ {
		this.Source[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 6)
	}
	return this
}

func NewPopulatedSearchResult(r randyRouterGrpc, easy bool) *SearchResult {
	this := &SearchResult{}
	this.TotalHits = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.TotalHits *= -1
	}
	this.MaxScore = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.MaxScore *= -1
	}
	this.MaxTook = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MaxTook *= -1
	}
	this.MaxTookId = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedSearchStatus(r, easy)
	}
	this.Msg = string(randStringRouterGrpc(r))
	if r.Intn(5) != 0 {
		v21 := r.Intn(5)
		this.ResultItems = make([]*ResultItem, v21)
		for i := 0; i < v21; i++ {
			this.ResultItems[i] = NewPopulatedResultItem(r, easy)
		}
	}
	this.PID = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v22 := r.Intn(10)
		this.Explain = make(map[uint32]string)
		for i := 0; i < v22; i++ {
			this.Explain[uint32(r.Uint32())] = randStringRouterGrpc(r)
		}
	}
	this.Timeout = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 11)
	}
	return this
}

func NewPopulatedSearchResponse(r randyRouterGrpc, easy bool) *SearchResponse {
	this := &SearchResponse{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedResponseHead(r, easy)
	}
	if r.Intn(5) != 0 {
		v23 := r.Intn(5)
		this.Results = make([]*SearchResult, v23)
		for i := 0; i < v23; i++ {
			this.Results[i] = NewPopulatedSearchResult(r, easy)
		}
	}
	this.OnlineLogMessage = string(randStringRouterGrpc(r))
	this.Timeout = bool(bool(r.Intn(2) == 0))
	v24 := r.Intn(100)
	this.FlatBytes = make([]byte, v24)
	for i := 0; i < v24; i++ {
		this.FlatBytes[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		v25 := r.Intn(10)
		this.SortFieldMap = make(map[string]string)
		for i := 0; i < v25; i++ {
			this.SortFieldMap[randStringRouterGrpc(r)] = randStringRouterGrpc(r)
		}
	}
	this.TopSize = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.TopSize *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 8)
	}
	return this
}

func NewPopulatedSearchStatus(r randyRouterGrpc, easy bool) *SearchStatus {
	this := &SearchStatus{}
	this.Total = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Total *= -1
	}
	this.Failed = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Failed *= -1
	}
	this.Successful = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Successful *= -1
	}
	this.Msg = string(randStringRouterGrpc(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 5)
	}
	return this
}

func NewPopulatedMSearchRequest(r randyRouterGrpc, easy bool) *MSearchRequest {
	this := &MSearchRequest{}
	if r.Intn(5) != 0 {
		this.Head = NewPopulatedRequestHead(r, easy)
	}
	if r.Intn(5) != 0 {
		v26 := r.Intn(5)
		this.SearchRequests = make([]*SearchRequest, v26)
		for i := 0; i < v26; i++ {
			this.SearchRequests[i] = NewPopulatedSearchRequest(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRouterGrpc(r, 3)
	}
	return this
}

type randyRouterGrpc interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRouterGrpc(r randyRouterGrpc) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRouterGrpc(r randyRouterGrpc) string {
	v27 := r.Intn(100)
	tmps := make([]rune, v27)
	for i := 0; i < v27; i++ {
		tmps[i] = randUTF8RuneRouterGrpc(r)
	}
	return string(tmps)
}
func randUnrecognizedRouterGrpc(r randyRouterGrpc, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRouterGrpc(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRouterGrpc(dAtA []byte, r randyRouterGrpc, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRouterGrpc(dAtA, uint64(key))
		v28 := r.Int63()
		if r.Intn(2) == 0 {
			v28 *= -1
		}
		dAtA = encodeVarintPopulateRouterGrpc(dAtA, uint64(v28))
	case 1:
		dAtA = encodeVarintPopulateRouterGrpc(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRouterGrpc(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRouterGrpc(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRouterGrpc(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRouterGrpc(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RequestHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeOutMs != 0 {
		n += 1 + sovRouterGrpc(uint64(m.TimeOutMs))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	l = len(m.DbName)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	l = len(m.SpaceName)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	l = len(m.ClientType)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRouterGrpc(uint64(len(k))) + 1 + len(v) + sovRouterGrpc(uint64(len(v)))
			n += mapEntrySize + 1 + sovRouterGrpc(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRouterGrpc(uint64(len(k))) + 1 + len(v) + sovRouterGrpc(uint64(len(v)))
			n += mapEntrySize + 1 + sovRouterGrpc(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if len(m.PrimaryKeys) > 0 {
		for _, s := range m.PrimaryKeys {
			l = len(s)
			n += 1 + l + sovRouterGrpc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if len(m.PrimaryKeys) > 0 {
		for _, s := range m.PrimaryKeys {
			l = len(s)
			n += 1 + l + sovRouterGrpc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.Doc != nil {
		l = m.Doc.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.Doc != nil {
		l = m.Doc.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BulkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if len(m.Docs) > 0 {
		for _, e := range m.Docs {
			l = e.Size()
			n += 1 + l + sovRouterGrpc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForceMergeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlushRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovRouterGrpc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	l = len(m.PrimaryKey)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovRouterGrpc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BulkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovRouterGrpc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForceMergeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.Shards != nil {
		l = m.Shards.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelByQueryeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.DelNum != 0 {
		n += 1 + sovRouterGrpc(uint64(m.DelNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlushResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.Shards != nil {
		l = m.Shards.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TermFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.IsUnion != 0 {
		n += 1 + sovRouterGrpc(uint64(m.IsUnion))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RangeFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	l = len(m.LowerValue)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	l = len(m.UpperValue)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.IncludeLower {
		n += 2
	}
	if m.IncludeUpper {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SortField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.Type {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VectorQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.MinScore != 0 {
		n += 9
	}
	if m.MaxScore != 0 {
		n += 9
	}
	if m.Boost != 0 {
		n += 9
	}
	if m.HasBoost != 0 {
		n += 1 + sovRouterGrpc(uint64(m.HasBoost))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RetrievalParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MetricType != 0 {
		n += 1 + sovRouterGrpc(uint64(m.MetricType))
	}
	if m.Nprobe != 0 {
		n += 1 + sovRouterGrpc(uint64(m.Nprobe))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.ReqNum != 0 {
		n += 1 + sovRouterGrpc(uint64(m.ReqNum))
	}
	if m.TopN != 0 {
		n += 1 + sovRouterGrpc(uint64(m.TopN))
	}
	if m.IsBruteSearch != 0 {
		n += 1 + sovRouterGrpc(uint64(m.IsBruteSearch))
	}
	if len(m.VecFields) > 0 {
		for _, e := range m.VecFields {
			l = e.Size()
			n += 1 + l + sovRouterGrpc(uint64(l))
		}
	}
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovRouterGrpc(uint64(l))
		}
	}
	if len(m.RangeFilters) > 0 {
		for _, e := range m.RangeFilters {
			l = e.Size()
			n += 1 + l + sovRouterGrpc(uint64(l))
		}
	}
	if len(m.TermFilters) > 0 {
		for _, e := range m.TermFilters {
			l = e.Size()
			n += 1 + l + sovRouterGrpc(uint64(l))
		}
	}
	l = len(m.OnlineLogLevel)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	l = len(m.RetrievalParams)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.HasRank {
		n += 2
	}
	if m.MultiVectorRank != 0 {
		n += 1 + sovRouterGrpc(uint64(m.MultiVectorRank))
	}
	if m.ParallelBasedOnQuery {
		n += 2
	}
	if m.L2Sqrt {
		n += 2
	}
	if m.IvfFlat {
		n += 2
	}
	if m.IsVectorValue {
		n += 3
	}
	if len(m.SortFieldMap) > 0 {
		for k, v := range m.SortFieldMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRouterGrpc(uint64(len(k))) + 1 + len(v) + sovRouterGrpc(uint64(len(v)))
			n += mapEntrySize + 2 + sovRouterGrpc(uint64(mapEntrySize))
		}
	}
	if len(m.SortFields) > 0 {
		for _, e := range m.SortFields {
			l = e.Size()
			n += 2 + l + sovRouterGrpc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResultItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != 0 {
		n += 9
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovRouterGrpc(uint64(l))
		}
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	l = len(m.PKey)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalHits != 0 {
		n += 1 + sovRouterGrpc(uint64(m.TotalHits))
	}
	if m.MaxScore != 0 {
		n += 9
	}
	if m.MaxTook != 0 {
		n += 1 + sovRouterGrpc(uint64(m.MaxTook))
	}
	if m.MaxTookId != 0 {
		n += 1 + sovRouterGrpc(uint64(m.MaxTookId))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if len(m.ResultItems) > 0 {
		for _, e := range m.ResultItems {
			l = e.Size()
			n += 1 + l + sovRouterGrpc(uint64(l))
		}
	}
	if m.PID != 0 {
		n += 1 + sovRouterGrpc(uint64(m.PID))
	}
	if len(m.Explain) > 0 {
		for k, v := range m.Explain {
			_ = k
			_ = v
			mapEntrySize := 1 + sovRouterGrpc(uint64(k)) + 1 + len(v) + sovRouterGrpc(uint64(len(v)))
			n += mapEntrySize + 1 + sovRouterGrpc(uint64(mapEntrySize))
		}
	}
	if m.Timeout {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovRouterGrpc(uint64(l))
		}
	}
	l = len(m.OnlineLogMessage)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.Timeout {
		n += 2
	}
	l = len(m.FlatBytes)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if len(m.SortFieldMap) > 0 {
		for k, v := range m.SortFieldMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRouterGrpc(uint64(len(k))) + 1 + len(v) + sovRouterGrpc(uint64(len(v)))
			n += mapEntrySize + 1 + sovRouterGrpc(uint64(mapEntrySize))
		}
	}
	if m.TopSize != 0 {
		n += 1 + sovRouterGrpc(uint64(m.TopSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovRouterGrpc(uint64(m.Total))
	}
	if m.Failed != 0 {
		n += 1 + sovRouterGrpc(uint64(m.Failed))
	}
	if m.Successful != 0 {
		n += 1 + sovRouterGrpc(uint64(m.Successful))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MSearchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRouterGrpc(uint64(l))
	}
	if len(m.SearchRequests) > 0 {
		for _, e := range m.SearchRequests {
			l = e.Size()
			n += 1 + l + sovRouterGrpc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRouterGrpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRouterGrpc(x uint64) (n int) {
	return sovRouterGrpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestHead) String() string {
	if this == nil {
		return "nil"
	}
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%v: %v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	s := strings.Join([]string{`&RequestHead{`,
		`TimeOutMs:` + fmt.Sprintf("%v", this.TimeOutMs) + `,`,
		`UserName:` + fmt.Sprintf("%v", this.UserName) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`DbName:` + fmt.Sprintf("%v", this.DbName) + `,`,
		`SpaceName:` + fmt.Sprintf("%v", this.SpaceName) + `,`,
		`ClientType:` + fmt.Sprintf("%v", this.ClientType) + `,`,
		`Params:` + mapStringForParams + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseHead) String() string {
	if this == nil {
		return "nil"
	}
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%v: %v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	s := strings.Join([]string{`&ResponseHead{`,
		`Err:` + strings.Replace(fmt.Sprintf("%v", this.Err), "Error", "Error", 1) + `,`,
		`Params:` + mapStringForParams + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRequest{`,
		`Head:` + strings.Replace(this.Head.String(), "RequestHead", "RequestHead", 1) + `,`,
		`PrimaryKeys:` + fmt.Sprintf("%v", this.PrimaryKeys) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRequest{`,
		`Head:` + strings.Replace(this.Head.String(), "RequestHead", "RequestHead", 1) + `,`,
		`PrimaryKeys:` + fmt.Sprintf("%v", this.PrimaryKeys) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddRequest{`,
		`Head:` + strings.Replace(this.Head.String(), "RequestHead", "RequestHead", 1) + `,`,
		`Doc:` + strings.Replace(fmt.Sprintf("%v", this.Doc), "Document", "Document", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateRequest{`,
		`Head:` + strings.Replace(this.Head.String(), "RequestHead", "RequestHead", 1) + `,`,
		`Doc:` + strings.Replace(fmt.Sprintf("%v", this.Doc), "Document", "Document", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BulkRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDocs := "[]*Document{"
	for _, f := range this.Docs {
		repeatedStringForDocs += strings.Replace(fmt.Sprintf("%v", f), "Document", "Document", 1) + ","
	}
	repeatedStringForDocs += "}"
	s := strings.Join([]string{`&BulkRequest{`,
		`Head:` + strings.Replace(this.Head.String(), "RequestHead", "RequestHead", 1) + `,`,
		`Docs:` + repeatedStringForDocs + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForceMergeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceMergeRequest{`,
		`Head:` + strings.Replace(this.Head.String(), "RequestHead", "RequestHead", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlushRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlushRequest{`,
		`Head:` + strings.Replace(this.Head.String(), "RequestHead", "RequestHead", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*Item{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(fmt.Sprintf("%v", f), "Item", "Item", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&GetResponse{`,
		`Head:` + strings.Replace(this.Head.String(), "ResponseHead", "ResponseHead", 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddResponse{`,
		`Head:` + strings.Replace(this.Head.String(), "ResponseHead", "ResponseHead", 1) + `,`,
		`PrimaryKey:` + fmt.Sprintf("%v", this.PrimaryKey) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateResponse{`,
		`Head:` + strings.Replace(this.Head.String(), "ResponseHead", "ResponseHead", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*Item{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(fmt.Sprintf("%v", f), "Item", "Item", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&DeleteResponse{`,
		`Head:` + strings.Replace(this.Head.String(), "ResponseHead", "ResponseHead", 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BulkResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*Item{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(fmt.Sprintf("%v", f), "Item", "Item", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&BulkResponse{`,
		`Head:` + strings.Replace(this.Head.String(), "ResponseHead", "ResponseHead", 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForceMergeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceMergeResponse{`,
		`Head:` + strings.Replace(this.Head.String(), "ResponseHead", "ResponseHead", 1) + `,`,
		`Shards:` + strings.Replace(this.Shards.String(), "SearchStatus", "SearchStatus", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DelByQueryeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DelByQueryeResponse{`,
		`Head:` + strings.Replace(this.Head.String(), "ResponseHead", "ResponseHead", 1) + `,`,
		`DelNum:` + fmt.Sprintf("%v", this.DelNum) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlushResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlushResponse{`,
		`Head:` + strings.Replace(this.Head.String(), "ResponseHead", "ResponseHead", 1) + `,`,
		`Shards:` + strings.Replace(this.Shards.String(), "SearchStatus", "SearchStatus", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TermFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TermFilter{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`IsUnion:` + fmt.Sprintf("%v", this.IsUnion) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RangeFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RangeFilter{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`LowerValue:` + fmt.Sprintf("%v", this.LowerValue) + `,`,
		`UpperValue:` + fmt.Sprintf("%v", this.UpperValue) + `,`,
		`IncludeLower:` + fmt.Sprintf("%v", this.IncludeLower) + `,`,
		`IncludeUpper:` + fmt.Sprintf("%v", this.IncludeUpper) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SortField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SortField{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VectorQuery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VectorQuery{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`MinScore:` + fmt.Sprintf("%v", this.MinScore) + `,`,
		`MaxScore:` + fmt.Sprintf("%v", this.MaxScore) + `,`,
		`Boost:` + fmt.Sprintf("%v", this.Boost) + `,`,
		`HasBoost:` + fmt.Sprintf("%v", this.HasBoost) + `,`,
		`Format:` + fmt.Sprintf("%v", this.Format) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrievalParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrievalParameters{`,
		`MetricType:` + fmt.Sprintf("%v", this.MetricType) + `,`,
		`Nprobe:` + fmt.Sprintf("%v", this.Nprobe) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVecFields := "[]*VectorQuery{"
	for _, f := range this.VecFields {
		repeatedStringForVecFields += strings.Replace(f.String(), "VectorQuery", "VectorQuery", 1) + ","
	}
	repeatedStringForVecFields += "}"
	repeatedStringForRangeFilters := "[]*RangeFilter{"
	for _, f := range this.RangeFilters {
		repeatedStringForRangeFilters += strings.Replace(f.String(), "RangeFilter", "RangeFilter", 1) + ","
	}
	repeatedStringForRangeFilters += "}"
	repeatedStringForTermFilters := "[]*TermFilter{"
	for _, f := range this.TermFilters {
		repeatedStringForTermFilters += strings.Replace(f.String(), "TermFilter", "TermFilter", 1) + ","
	}
	repeatedStringForTermFilters += "}"
	repeatedStringForSortFields := "[]*SortField{"
	for _, f := range this.SortFields {
		repeatedStringForSortFields += strings.Replace(f.String(), "SortField", "SortField", 1) + ","
	}
	repeatedStringForSortFields += "}"
	keysForSortFieldMap := make([]string, 0, len(this.SortFieldMap))
	for k, _ := range this.SortFieldMap {
		keysForSortFieldMap = append(keysForSortFieldMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSortFieldMap)
	mapStringForSortFieldMap := "map[string]string{"
	for _, k := range keysForSortFieldMap {
		mapStringForSortFieldMap += fmt.Sprintf("%v: %v,", k, this.SortFieldMap[k])
	}
	mapStringForSortFieldMap += "}"
	s := strings.Join([]string{`&SearchRequest{`,
		`Head:` + strings.Replace(this.Head.String(), "RequestHead", "RequestHead", 1) + `,`,
		`ReqNum:` + fmt.Sprintf("%v", this.ReqNum) + `,`,
		`TopN:` + fmt.Sprintf("%v", this.TopN) + `,`,
		`IsBruteSearch:` + fmt.Sprintf("%v", this.IsBruteSearch) + `,`,
		`VecFields:` + repeatedStringForVecFields + `,`,
		`Fields:` + fmt.Sprintf("%v", this.Fields) + `,`,
		`RangeFilters:` + repeatedStringForRangeFilters + `,`,
		`TermFilters:` + repeatedStringForTermFilters + `,`,
		`OnlineLogLevel:` + fmt.Sprintf("%v", this.OnlineLogLevel) + `,`,
		`RetrievalParams:` + fmt.Sprintf("%v", this.RetrievalParams) + `,`,
		`HasRank:` + fmt.Sprintf("%v", this.HasRank) + `,`,
		`MultiVectorRank:` + fmt.Sprintf("%v", this.MultiVectorRank) + `,`,
		`ParallelBasedOnQuery:` + fmt.Sprintf("%v", this.ParallelBasedOnQuery) + `,`,
		`L2Sqrt:` + fmt.Sprintf("%v", this.L2Sqrt) + `,`,
		`IvfFlat:` + fmt.Sprintf("%v", this.IvfFlat) + `,`,
		`IsVectorValue:` + fmt.Sprintf("%v", this.IsVectorValue) + `,`,
		`SortFieldMap:` + mapStringForSortFieldMap + `,`,
		`SortFields:` + repeatedStringForSortFields + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResultItem) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*Field{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(fmt.Sprintf("%v", f), "Field", "Field", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&ResultItem{`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Fields:` + repeatedStringForFields + `,`,
		`Extra:` + fmt.Sprintf("%v", this.Extra) + `,`,
		`PKey:` + fmt.Sprintf("%v", this.PKey) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchResult) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResultItems := "[]*ResultItem{"
	for _, f := range this.ResultItems {
		repeatedStringForResultItems += strings.Replace(f.String(), "ResultItem", "ResultItem", 1) + ","
	}
	repeatedStringForResultItems += "}"
	keysForExplain := make([]uint32, 0, len(this.Explain))
	for k, _ := range this.Explain {
		keysForExplain = append(keysForExplain, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForExplain)
	mapStringForExplain := "map[uint32]string{"
	for _, k := range keysForExplain {
		mapStringForExplain += fmt.Sprintf("%v: %v,", k, this.Explain[k])
	}
	mapStringForExplain += "}"
	s := strings.Join([]string{`&SearchResult{`,
		`TotalHits:` + fmt.Sprintf("%v", this.TotalHits) + `,`,
		`MaxScore:` + fmt.Sprintf("%v", this.MaxScore) + `,`,
		`MaxTook:` + fmt.Sprintf("%v", this.MaxTook) + `,`,
		`MaxTookId:` + fmt.Sprintf("%v", this.MaxTookId) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "SearchStatus", "SearchStatus", 1) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`ResultItems:` + repeatedStringForResultItems + `,`,
		`PID:` + fmt.Sprintf("%v", this.PID) + `,`,
		`Explain:` + mapStringForExplain + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResults := "[]*SearchResult{"
	for _, f := range this.Results {
		repeatedStringForResults += strings.Replace(f.String(), "SearchResult", "SearchResult", 1) + ","
	}
	repeatedStringForResults += "}"
	keysForSortFieldMap := make([]string, 0, len(this.SortFieldMap))
	for k, _ := range this.SortFieldMap {
		keysForSortFieldMap = append(keysForSortFieldMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSortFieldMap)
	mapStringForSortFieldMap := "map[string]string{"
	for _, k := range keysForSortFieldMap {
		mapStringForSortFieldMap += fmt.Sprintf("%v: %v,", k, this.SortFieldMap[k])
	}
	mapStringForSortFieldMap += "}"
	s := strings.Join([]string{`&SearchResponse{`,
		`Head:` + strings.Replace(this.Head.String(), "ResponseHead", "ResponseHead", 1) + `,`,
		`Results:` + repeatedStringForResults + `,`,
		`OnlineLogMessage:` + fmt.Sprintf("%v", this.OnlineLogMessage) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`FlatBytes:` + fmt.Sprintf("%v", this.FlatBytes) + `,`,
		`SortFieldMap:` + mapStringForSortFieldMap + `,`,
		`TopSize:` + fmt.Sprintf("%v", this.TopSize) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchStatus{`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`Failed:` + fmt.Sprintf("%v", this.Failed) + `,`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MSearchRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSearchRequests := "[]*SearchRequest{"
	for _, f := range this.SearchRequests {
		repeatedStringForSearchRequests += strings.Replace(f.String(), "SearchRequest", "SearchRequest", 1) + ","
	}
	repeatedStringForSearchRequests += "}"
	s := strings.Join([]string{`&MSearchRequest{`,
		`Head:` + strings.Replace(this.Head.String(), "RequestHead", "RequestHead", 1) + `,`,
		`SearchRequests:` + repeatedStringForSearchRequests + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRouterGrpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOutMs", wireType)
			}
			m.TimeOutMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeOutMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRouterGrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRouterGrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRouterGrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRouterGrpc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &Error{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRouterGrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRouterGrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRouterGrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRouterGrpc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RequestHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryKeys = append(m.PrimaryKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RequestHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryKeys = append(m.PrimaryKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RequestHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Doc == nil {
				m.Doc = &Document{}
			}
			if err := m.Doc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RequestHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Doc == nil {
				m.Doc = &Document{}
			}
			if err := m.Doc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BulkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BulkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BulkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RequestHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Docs = append(m.Docs, &Document{})
			if err := m.Docs[len(m.Docs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceMergeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceMergeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceMergeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RequestHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RequestHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &ResponseHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &ResponseHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &ResponseHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &ResponseHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BulkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BulkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BulkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &ResponseHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceMergeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceMergeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceMergeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &ResponseHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shards == nil {
				m.Shards = &SearchStatus{}
			}
			if err := m.Shards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelByQueryeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelByQueryeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelByQueryeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &ResponseHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelNum", wireType)
			}
			m.DelNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &ResponseHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shards == nil {
				m.Shards = &SearchStatus{}
			}
			if err := m.Shards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TermFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TermFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TermFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUnion", wireType)
			}
			m.IsUnion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsUnion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowerValue = append(m.LowerValue[:0], dAtA[iNdEx:postIndex]...)
			if m.LowerValue == nil {
				m.LowerValue = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpperValue = append(m.UpperValue[:0], dAtA[iNdEx:postIndex]...)
			if m.UpperValue == nil {
				m.UpperValue = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeLower", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeLower = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeUpper", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeUpper = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SortField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SortField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SortField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VectorQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VectorQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VectorQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinScore = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxScore = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boost", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Boost = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasBoost", wireType)
			}
			m.HasBoost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasBoost |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrievalParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrievalParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrievalParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricType", wireType)
			}
			m.MetricType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetricType |= RetrievalParameters_DistanceMetricType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nprobe", wireType)
			}
			m.Nprobe = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nprobe |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RequestHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqNum", wireType)
			}
			m.ReqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopN", wireType)
			}
			m.TopN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopN |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBruteSearch", wireType)
			}
			m.IsBruteSearch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsBruteSearch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VecFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VecFields = append(m.VecFields, &VectorQuery{})
			if err := m.VecFields[len(m.VecFields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeFilters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RangeFilters = append(m.RangeFilters, &RangeFilter{})
			if err := m.RangeFilters[len(m.RangeFilters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermFilters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TermFilters = append(m.TermFilters, &TermFilter{})
			if err := m.TermFilters[len(m.TermFilters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineLogLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlineLogLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetrievalParams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetrievalParams = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasRank", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasRank = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiVectorRank", wireType)
			}
			m.MultiVectorRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MultiVectorRank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParallelBasedOnQuery", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParallelBasedOnQuery = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2Sqrt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L2Sqrt = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IvfFlat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IvfFlat = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVectorValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVectorValue = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortFieldMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SortFieldMap == nil {
				m.SortFieldMap = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRouterGrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRouterGrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRouterGrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRouterGrpc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SortFieldMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortFields = append(m.SortFields, &SortField{})
			if err := m.SortFields[len(m.SortFields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = append(m.Source[:0], dAtA[iNdEx:postIndex]...)
			if m.Source == nil {
				m.Source = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalHits", wireType)
			}
			m.TotalHits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalHits |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxScore = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTook", wireType)
			}
			m.MaxTook = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTook |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTookId", wireType)
			}
			m.MaxTookId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTookId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SearchStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultItems = append(m.ResultItems, &ResultItem{})
			if err := m.ResultItems[len(m.ResultItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PID", wireType)
			}
			m.PID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Explain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Explain == nil {
				m.Explain = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRouterGrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRouterGrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRouterGrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRouterGrpc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Explain[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timeout = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &ResponseHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &SearchResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineLogMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlineLogMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timeout = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlatBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlatBytes = append(m.FlatBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.FlatBytes == nil {
				m.FlatBytes = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortFieldMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SortFieldMap == nil {
				m.SortFieldMap = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRouterGrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRouterGrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRouterGrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRouterGrpc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRouterGrpc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SortFieldMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopSize", wireType)
			}
			m.TopSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			m.Failed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Failed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			m.Successful = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Successful |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSearchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSearchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSearchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RequestHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchRequests = append(m.SearchRequests, &SearchRequest{})
			if err := m.SearchRequests[len(m.SearchRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouterGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouterGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRouterGrpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRouterGrpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRouterGrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRouterGrpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRouterGrpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRouterGrpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRouterGrpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRouterGrpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRouterGrpc = fmt.Errorf("proto: unexpected end of group")
)
