// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raftcmd.proto

package raftpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import pspb "github.com/vearch/vearch/proto/pspb"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CmdType int32

const (
	CmdType_WRITE       CmdType = 0
	CmdType_UPDATESPACE CmdType = 1
	CmdType_FLUSH       CmdType = 2
)

var CmdType_name = map[int32]string{
	0: "WRITE",
	1: "UPDATESPACE",
	2: "FLUSH",
}
var CmdType_value = map[string]int32{
	"WRITE":       0,
	"UPDATESPACE": 1,
	"FLUSH":       2,
}

func (x CmdType) String() string {
	return proto.EnumName(CmdType_name, int32(x))
}
func (CmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_raftcmd_a2893a4af0c05401, []int{0}
}

type RaftCommand struct {
	Type                 CmdType           `protobuf:"varint,1,opt,name=type,proto3,enum=raftpb.CmdType" json:"type,omitempty"`
	WriteCommand         *pspb.DocCmd      `protobuf:"bytes,2,opt,name=write_command,json=writeCommand,proto3" json:"write_command,omitempty"`
	UpdateSpace          *pspb.UpdateSpace `protobuf:"bytes,3,opt,name=update_space,json=updateSpace,proto3" json:"update_space,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RaftCommand) Reset()      { *m = RaftCommand{} }
func (*RaftCommand) ProtoMessage() {}
func (*RaftCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_raftcmd_a2893a4af0c05401, []int{0}
}
func (m *RaftCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RaftCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftCommand.Merge(dst, src)
}
func (m *RaftCommand) XXX_Size() int {
	return m.Size()
}
func (m *RaftCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftCommand.DiscardUnknown(m)
}

var xxx_messageInfo_RaftCommand proto.InternalMessageInfo

type SnapData struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapData) Reset()      { *m = SnapData{} }
func (*SnapData) ProtoMessage() {}
func (*SnapData) Descriptor() ([]byte, []int) {
	return fileDescriptor_raftcmd_a2893a4af0c05401, []int{1}
}
func (m *SnapData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SnapData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapData.Merge(dst, src)
}
func (m *SnapData) XXX_Size() int {
	return m.Size()
}
func (m *SnapData) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapData.DiscardUnknown(m)
}

var xxx_messageInfo_SnapData proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RaftCommand)(nil), "raftpb.RaftCommand")
	proto.RegisterType((*SnapData)(nil), "raftpb.SnapData")
	proto.RegisterEnum("raftpb.CmdType", CmdType_name, CmdType_value)
}
func (this *RaftCommand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftCommand)
	if !ok {
		that2, ok := that.(RaftCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.WriteCommand.Equal(that1.WriteCommand) {
		return false
	}
	if !this.UpdateSpace.Equal(that1.UpdateSpace) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SnapData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnapData)
	if !ok {
		that2, ok := that.(SnapData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *RaftCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.Type))
	}
	if m.WriteCommand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.WriteCommand.Size()))
		n1, err := m.WriteCommand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.UpdateSpace != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.UpdateSpace.Size()))
		n2, err := m.UpdateSpace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnapData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRaftcmd(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRaftCommand(r randyRaftcmd, easy bool) *RaftCommand {
	this := &RaftCommand{}
	this.Type = CmdType([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		this.WriteCommand = pspb.NewPopulatedDocCmd(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UpdateSpace = pspb.NewPopulatedUpdateSpace(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRaftcmd(r, 4)
	}
	return this
}

func NewPopulatedSnapData(r randyRaftcmd, easy bool) *SnapData {
	this := &SnapData{}
	v1 := r.Intn(100)
	this.Key = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(100)
	this.Value = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRaftcmd(r, 3)
	}
	return this
}

type randyRaftcmd interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRaftcmd(r randyRaftcmd) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRaftcmd(r randyRaftcmd) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneRaftcmd(r)
	}
	return string(tmps)
}
func randUnrecognizedRaftcmd(r randyRaftcmd, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRaftcmd(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRaftcmd(dAtA []byte, r randyRaftcmd, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRaftcmd(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RaftCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRaftcmd(uint64(m.Type))
	}
	if m.WriteCommand != nil {
		l = m.WriteCommand.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.UpdateSpace != nil {
		l = m.UpdateSpace.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRaftcmd(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRaftcmd(x uint64) (n int) {
	return sovRaftcmd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RaftCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RaftCommand{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`WriteCommand:` + strings.Replace(fmt.Sprintf("%v", this.WriteCommand), "DocCmd", "pspb.DocCmd", 1) + `,`,
		`UpdateSpace:` + strings.Replace(fmt.Sprintf("%v", this.UpdateSpace), "UpdateSpace", "pspb.UpdateSpace", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SnapData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SnapData{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRaftcmd(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RaftCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CmdType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WriteCommand == nil {
				m.WriteCommand = &pspb.DocCmd{}
			}
			if err := m.WriteCommand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateSpace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateSpace == nil {
				m.UpdateSpace = &pspb.UpdateSpace{}
			}
			if err := m.UpdateSpace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftcmd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRaftcmd
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaftcmd
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaftcmd(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaftcmd = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftcmd   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("raftcmd.proto", fileDescriptor_raftcmd_a2893a4af0c05401) }

var fileDescriptor_raftcmd_a2893a4af0c05401 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xbd, 0x4e, 0xe3, 0x40,
	0x14, 0x85, 0x67, 0xf2, 0xbb, 0x3b, 0x76, 0x36, 0x96, 0xb5, 0x45, 0x94, 0x62, 0x36, 0xca, 0x36,
	0xd1, 0x4a, 0x6b, 0xaf, 0xbc, 0xa2, 0x45, 0x4a, 0x9c, 0xa0, 0x20, 0x51, 0x44, 0x76, 0x22, 0x24,
	0x9a, 0x68, 0x6c, 0x4f, 0x8c, 0x45, 0x6c, 0x8f, 0x92, 0x31, 0x28, 0x1d, 0x8f, 0x41, 0x43, 0xcf,
	0x23, 0x50, 0x52, 0xa6, 0xa4, 0xa4, 0x42, 0xb1, 0x79, 0x01, 0x4a, 0x4a, 0xe4, 0x71, 0x10, 0x74,
	0xf7, 0x9c, 0x73, 0xbf, 0xd1, 0xd1, 0x5c, 0xd4, 0x58, 0x91, 0x05, 0x77, 0x43, 0x4f, 0x63, 0xab,
	0x98, 0xc7, 0x6a, 0x2d, 0x97, 0xcc, 0x69, 0xff, 0xf5, 0x03, 0x7e, 0x9e, 0x38, 0x9a, 0x1b, 0x87,
	0xba, 0x1f, 0xfb, 0xb1, 0x2e, 0x62, 0x27, 0x59, 0x08, 0x25, 0x84, 0x98, 0x0a, 0xac, 0x6d, 0x7c,
	0x59, 0xe7, 0x81, 0xbf, 0x24, 0xce, 0x5a, 0x77, 0x48, 0xe2, 0xd1, 0xc8, 0x0f, 0x22, 0x5a, 0xc0,
	0x3a, 0x5b, 0x33, 0x47, 0x27, 0x2c, 0x28, 0x98, 0xee, 0x2d, 0x44, 0x92, 0x45, 0x16, 0xdc, 0x8c,
	0xc3, 0x90, 0x44, 0x9e, 0xfa, 0x1b, 0x55, 0xf8, 0x86, 0xd1, 0x16, 0xec, 0xc0, 0xde, 0x0f, 0xa3,
	0xa9, 0x15, 0x4d, 0x34, 0x33, 0xf4, 0xa6, 0x1b, 0x46, 0x2d, 0x11, 0xaa, 0x06, 0x6a, 0x5c, 0xad,
	0x02, 0x4e, 0xe7, 0x6e, 0x41, 0xb5, 0x4a, 0x1d, 0xd8, 0x93, 0x8c, 0xba, 0x36, 0x8c, 0x5d, 0x33,
	0xf4, 0x06, 0x95, 0xed, 0xf3, 0x2f, 0x68, 0xc9, 0x62, 0xe7, 0xe3, 0xe1, 0x03, 0x24, 0x27, 0xcc,
	0x23, 0x9c, 0xce, 0xd7, 0x8c, 0xb8, 0xb4, 0x55, 0x16, 0x88, 0xac, 0xcd, 0x84, 0x69, 0xe7, 0xde,
	0x9e, 0x93, 0x92, 0x4f, 0xab, 0x6b, 0xa0, 0x6f, 0x76, 0x44, 0xd8, 0x90, 0x70, 0xa2, 0x2a, 0xa8,
	0x7c, 0x41, 0x37, 0xa2, 0x9a, 0x6c, 0xe5, 0xa3, 0xfa, 0x13, 0x55, 0x2f, 0xc9, 0x32, 0xa1, 0xa2,
	0x80, 0x6c, 0x15, 0xe2, 0xcf, 0x3f, 0x54, 0xdf, 0xf7, 0x55, 0xbf, 0xa3, 0xea, 0xa9, 0x75, 0x3c,
	0x1d, 0x29, 0x40, 0x6d, 0x22, 0x69, 0x36, 0x19, 0xf6, 0xa7, 0x23, 0x7b, 0xd2, 0x37, 0x47, 0x0a,
	0xcc, 0xb3, 0xa3, 0x93, 0x99, 0x3d, 0x56, 0x4a, 0x83, 0xc3, 0x6d, 0x8a, 0xc1, 0x53, 0x8a, 0xc1,
	0x2e, 0xc5, 0xe0, 0x35, 0xc5, 0xe0, 0x2d, 0xc5, 0xf0, 0x3a, 0xc3, 0xf0, 0x2e, 0xc3, 0xf0, 0x3e,
	0xc3, 0xe0, 0x21, 0xc3, 0x60, 0x9b, 0x61, 0xf8, 0x98, 0x61, 0xb8, 0xcb, 0x30, 0xbc, 0x79, 0xc1,
	0x60, 0x0c, 0xcf, 0xf6, 0x87, 0x72, 0x6a, 0xe2, 0x33, 0xff, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff,
	0xb6, 0xfe, 0x62, 0x19, 0xc8, 0x01, 0x00, 0x00,
}
